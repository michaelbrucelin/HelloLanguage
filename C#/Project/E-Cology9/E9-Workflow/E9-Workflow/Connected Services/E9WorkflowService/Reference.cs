//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace E9_Workflow.E9WorkflowService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowRequestInfo", Namespace="http://webservices.workflow.weaver")]
    [System.SerializableAttribute()]
    public partial class WorkflowRequestInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool canEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool canViewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string createTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string creatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string creatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string currentNodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string currentNodeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string forwardButtonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string isnextflowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastOperateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastOperatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool mustInputRemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool needAffirmanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string receiveTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string rejectButtonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string remarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string requestIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string requestLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string requestNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string secLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string statusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string subbackButtonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string submitButtonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string subnobackButtonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.WorkflowBaseInfo workflowBaseInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.WorkflowDetailTableInfo[] workflowDetailTableInfosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.ArrayOfString workflowHtmlShowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.ArrayOfString workflowHtmlTempleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.WorkflowMainTableInfo workflowMainTableInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.ArrayOfString[] workflowPhrasesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.WorkflowRequestLog[] workflowRequestLogsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool canEdit {
            get {
                return this.canEditField;
            }
            set {
                if ((this.canEditField.Equals(value) != true)) {
                    this.canEditField = value;
                    this.RaisePropertyChanged("canEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool canView {
            get {
                return this.canViewField;
            }
            set {
                if ((this.canViewField.Equals(value) != true)) {
                    this.canViewField = value;
                    this.RaisePropertyChanged("canView");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string createTime {
            get {
                return this.createTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.createTimeField, value) != true)) {
                    this.createTimeField = value;
                    this.RaisePropertyChanged("createTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string creatorId {
            get {
                return this.creatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.creatorIdField, value) != true)) {
                    this.creatorIdField = value;
                    this.RaisePropertyChanged("creatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string creatorName {
            get {
                return this.creatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.creatorNameField, value) != true)) {
                    this.creatorNameField = value;
                    this.RaisePropertyChanged("creatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string currentNodeId {
            get {
                return this.currentNodeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.currentNodeIdField, value) != true)) {
                    this.currentNodeIdField = value;
                    this.RaisePropertyChanged("currentNodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string currentNodeName {
            get {
                return this.currentNodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.currentNodeNameField, value) != true)) {
                    this.currentNodeNameField = value;
                    this.RaisePropertyChanged("currentNodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string forwardButtonName {
            get {
                return this.forwardButtonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.forwardButtonNameField, value) != true)) {
                    this.forwardButtonNameField = value;
                    this.RaisePropertyChanged("forwardButtonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string isnextflow {
            get {
                return this.isnextflowField;
            }
            set {
                if ((object.ReferenceEquals(this.isnextflowField, value) != true)) {
                    this.isnextflowField = value;
                    this.RaisePropertyChanged("isnextflow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastOperateTime {
            get {
                return this.lastOperateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.lastOperateTimeField, value) != true)) {
                    this.lastOperateTimeField = value;
                    this.RaisePropertyChanged("lastOperateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastOperatorName {
            get {
                return this.lastOperatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastOperatorNameField, value) != true)) {
                    this.lastOperatorNameField = value;
                    this.RaisePropertyChanged("lastOperatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string messageType {
            get {
                return this.messageTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.messageTypeField, value) != true)) {
                    this.messageTypeField = value;
                    this.RaisePropertyChanged("messageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool mustInputRemark {
            get {
                return this.mustInputRemarkField;
            }
            set {
                if ((this.mustInputRemarkField.Equals(value) != true)) {
                    this.mustInputRemarkField = value;
                    this.RaisePropertyChanged("mustInputRemark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool needAffirmance {
            get {
                return this.needAffirmanceField;
            }
            set {
                if ((this.needAffirmanceField.Equals(value) != true)) {
                    this.needAffirmanceField = value;
                    this.RaisePropertyChanged("needAffirmance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string receiveTime {
            get {
                return this.receiveTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.receiveTimeField, value) != true)) {
                    this.receiveTimeField = value;
                    this.RaisePropertyChanged("receiveTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string rejectButtonName {
            get {
                return this.rejectButtonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.rejectButtonNameField, value) != true)) {
                    this.rejectButtonNameField = value;
                    this.RaisePropertyChanged("rejectButtonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string remark {
            get {
                return this.remarkField;
            }
            set {
                if ((object.ReferenceEquals(this.remarkField, value) != true)) {
                    this.remarkField = value;
                    this.RaisePropertyChanged("remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string requestId {
            get {
                return this.requestIdField;
            }
            set {
                if ((object.ReferenceEquals(this.requestIdField, value) != true)) {
                    this.requestIdField = value;
                    this.RaisePropertyChanged("requestId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string requestLevel {
            get {
                return this.requestLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.requestLevelField, value) != true)) {
                    this.requestLevelField = value;
                    this.RaisePropertyChanged("requestLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string requestName {
            get {
                return this.requestNameField;
            }
            set {
                if ((object.ReferenceEquals(this.requestNameField, value) != true)) {
                    this.requestNameField = value;
                    this.RaisePropertyChanged("requestName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string secLevel {
            get {
                return this.secLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.secLevelField, value) != true)) {
                    this.secLevelField = value;
                    this.RaisePropertyChanged("secLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string status {
            get {
                return this.statusField;
            }
            set {
                if ((object.ReferenceEquals(this.statusField, value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string subbackButtonName {
            get {
                return this.subbackButtonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.subbackButtonNameField, value) != true)) {
                    this.subbackButtonNameField = value;
                    this.RaisePropertyChanged("subbackButtonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string submitButtonName {
            get {
                return this.submitButtonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.submitButtonNameField, value) != true)) {
                    this.submitButtonNameField = value;
                    this.RaisePropertyChanged("submitButtonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string subnobackButtonName {
            get {
                return this.subnobackButtonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.subnobackButtonNameField, value) != true)) {
                    this.subnobackButtonNameField = value;
                    this.RaisePropertyChanged("subnobackButtonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.WorkflowBaseInfo workflowBaseInfo {
            get {
                return this.workflowBaseInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowBaseInfoField, value) != true)) {
                    this.workflowBaseInfoField = value;
                    this.RaisePropertyChanged("workflowBaseInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.WorkflowDetailTableInfo[] workflowDetailTableInfos {
            get {
                return this.workflowDetailTableInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowDetailTableInfosField, value) != true)) {
                    this.workflowDetailTableInfosField = value;
                    this.RaisePropertyChanged("workflowDetailTableInfos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.ArrayOfString workflowHtmlShow {
            get {
                return this.workflowHtmlShowField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowHtmlShowField, value) != true)) {
                    this.workflowHtmlShowField = value;
                    this.RaisePropertyChanged("workflowHtmlShow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.ArrayOfString workflowHtmlTemplete {
            get {
                return this.workflowHtmlTempleteField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowHtmlTempleteField, value) != true)) {
                    this.workflowHtmlTempleteField = value;
                    this.RaisePropertyChanged("workflowHtmlTemplete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.WorkflowMainTableInfo workflowMainTableInfo {
            get {
                return this.workflowMainTableInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowMainTableInfoField, value) != true)) {
                    this.workflowMainTableInfoField = value;
                    this.RaisePropertyChanged("workflowMainTableInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.ArrayOfString[] workflowPhrases {
            get {
                return this.workflowPhrasesField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowPhrasesField, value) != true)) {
                    this.workflowPhrasesField = value;
                    this.RaisePropertyChanged("workflowPhrases");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.WorkflowRequestLog[] workflowRequestLogs {
            get {
                return this.workflowRequestLogsField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowRequestLogsField, value) != true)) {
                    this.workflowRequestLogsField = value;
                    this.RaisePropertyChanged("workflowRequestLogs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowBaseInfo", Namespace="http://webservices.workflow.weaver")]
    [System.SerializableAttribute()]
    public partial class WorkflowBaseInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string workflowIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string workflowNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string workflowTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string workflowTypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string workflowId {
            get {
                return this.workflowIdField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowIdField, value) != true)) {
                    this.workflowIdField = value;
                    this.RaisePropertyChanged("workflowId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string workflowName {
            get {
                return this.workflowNameField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowNameField, value) != true)) {
                    this.workflowNameField = value;
                    this.RaisePropertyChanged("workflowName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string workflowTypeId {
            get {
                return this.workflowTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowTypeIdField, value) != true)) {
                    this.workflowTypeIdField = value;
                    this.RaisePropertyChanged("workflowTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string workflowTypeName {
            get {
                return this.workflowTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowTypeNameField, value) != true)) {
                    this.workflowTypeNameField = value;
                    this.RaisePropertyChanged("workflowTypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowMainTableInfo", Namespace="http://webservices.workflow.weaver")]
    [System.SerializableAttribute()]
    public partial class WorkflowMainTableInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.WorkflowRequestTableRecord[] requestRecordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tableDBNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.WorkflowRequestTableRecord[] requestRecords {
            get {
                return this.requestRecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.requestRecordsField, value) != true)) {
                    this.requestRecordsField = value;
                    this.RaisePropertyChanged("requestRecords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tableDBName {
            get {
                return this.tableDBNameField;
            }
            set {
                if ((object.ReferenceEquals(this.tableDBNameField, value) != true)) {
                    this.tableDBNameField = value;
                    this.RaisePropertyChanged("tableDBName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowDetailTableInfo", Namespace="http://webservices.workflow.weaver")]
    [System.SerializableAttribute()]
    public partial class WorkflowDetailTableInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tableDBNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.ArrayOfString tableFieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tableTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.WorkflowRequestTableRecord[] workflowRequestTableRecordsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tableDBName {
            get {
                return this.tableDBNameField;
            }
            set {
                if ((object.ReferenceEquals(this.tableDBNameField, value) != true)) {
                    this.tableDBNameField = value;
                    this.RaisePropertyChanged("tableDBName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.ArrayOfString tableFieldName {
            get {
                return this.tableFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.tableFieldNameField, value) != true)) {
                    this.tableFieldNameField = value;
                    this.RaisePropertyChanged("tableFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tableTitle {
            get {
                return this.tableTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.tableTitleField, value) != true)) {
                    this.tableTitleField = value;
                    this.RaisePropertyChanged("tableTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.WorkflowRequestTableRecord[] workflowRequestTableRecords {
            get {
                return this.workflowRequestTableRecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowRequestTableRecordsField, value) != true)) {
                    this.workflowRequestTableRecordsField = value;
                    this.RaisePropertyChanged("workflowRequestTableRecords");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ArrayOfString", Namespace="webservices.services.weaver.com.cn", ItemName="string")]
    [System.SerializableAttribute()]
    public class ArrayOfString : System.Collections.Generic.List<string> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowRequestLog", Namespace="http://webservices.workflow.weaver")]
    [System.SerializableAttribute()]
    public partial class WorkflowRequestLog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string agentorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string agentorDeptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string annexDocHtmlsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nodeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operateTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operatorDeptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operatorSignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string receivedPersonsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string remarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string remarkSignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signDocHtmlsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signWorkFlowHtmlsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string agentor {
            get {
                return this.agentorField;
            }
            set {
                if ((object.ReferenceEquals(this.agentorField, value) != true)) {
                    this.agentorField = value;
                    this.RaisePropertyChanged("agentor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string agentorDept {
            get {
                return this.agentorDeptField;
            }
            set {
                if ((object.ReferenceEquals(this.agentorDeptField, value) != true)) {
                    this.agentorDeptField = value;
                    this.RaisePropertyChanged("agentorDept");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string annexDocHtmls {
            get {
                return this.annexDocHtmlsField;
            }
            set {
                if ((object.ReferenceEquals(this.annexDocHtmlsField, value) != true)) {
                    this.annexDocHtmlsField = value;
                    this.RaisePropertyChanged("annexDocHtmls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nodeId {
            get {
                return this.nodeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.nodeIdField, value) != true)) {
                    this.nodeIdField = value;
                    this.RaisePropertyChanged("nodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nodeName {
            get {
                return this.nodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.nodeNameField, value) != true)) {
                    this.nodeNameField = value;
                    this.RaisePropertyChanged("nodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operateDate {
            get {
                return this.operateDateField;
            }
            set {
                if ((object.ReferenceEquals(this.operateDateField, value) != true)) {
                    this.operateDateField = value;
                    this.RaisePropertyChanged("operateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operateTime {
            get {
                return this.operateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.operateTimeField, value) != true)) {
                    this.operateTimeField = value;
                    this.RaisePropertyChanged("operateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operateType {
            get {
                return this.operateTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.operateTypeField, value) != true)) {
                    this.operateTypeField = value;
                    this.RaisePropertyChanged("operateType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operatorDept {
            get {
                return this.operatorDeptField;
            }
            set {
                if ((object.ReferenceEquals(this.operatorDeptField, value) != true)) {
                    this.operatorDeptField = value;
                    this.RaisePropertyChanged("operatorDept");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operatorId {
            get {
                return this.operatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.operatorIdField, value) != true)) {
                    this.operatorIdField = value;
                    this.RaisePropertyChanged("operatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operatorName {
            get {
                return this.operatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.operatorNameField, value) != true)) {
                    this.operatorNameField = value;
                    this.RaisePropertyChanged("operatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operatorSign {
            get {
                return this.operatorSignField;
            }
            set {
                if ((object.ReferenceEquals(this.operatorSignField, value) != true)) {
                    this.operatorSignField = value;
                    this.RaisePropertyChanged("operatorSign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string receivedPersons {
            get {
                return this.receivedPersonsField;
            }
            set {
                if ((object.ReferenceEquals(this.receivedPersonsField, value) != true)) {
                    this.receivedPersonsField = value;
                    this.RaisePropertyChanged("receivedPersons");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string remark {
            get {
                return this.remarkField;
            }
            set {
                if ((object.ReferenceEquals(this.remarkField, value) != true)) {
                    this.remarkField = value;
                    this.RaisePropertyChanged("remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string remarkSign {
            get {
                return this.remarkSignField;
            }
            set {
                if ((object.ReferenceEquals(this.remarkSignField, value) != true)) {
                    this.remarkSignField = value;
                    this.RaisePropertyChanged("remarkSign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signDocHtmls {
            get {
                return this.signDocHtmlsField;
            }
            set {
                if ((object.ReferenceEquals(this.signDocHtmlsField, value) != true)) {
                    this.signDocHtmlsField = value;
                    this.RaisePropertyChanged("signDocHtmls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signWorkFlowHtmls {
            get {
                return this.signWorkFlowHtmlsField;
            }
            set {
                if ((object.ReferenceEquals(this.signWorkFlowHtmlsField, value) != true)) {
                    this.signWorkFlowHtmlsField = value;
                    this.RaisePropertyChanged("signWorkFlowHtmls");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowRequestTableRecord", Namespace="http://webservices.workflow.weaver")]
    [System.SerializableAttribute()]
    public partial class WorkflowRequestTableRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int recordOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.WorkflowRequestTableField[] workflowRequestTableFieldsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int recordOrder {
            get {
                return this.recordOrderField;
            }
            set {
                if ((this.recordOrderField.Equals(value) != true)) {
                    this.recordOrderField = value;
                    this.RaisePropertyChanged("recordOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.WorkflowRequestTableField[] workflowRequestTableFields {
            get {
                return this.workflowRequestTableFieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.workflowRequestTableFieldsField, value) != true)) {
                    this.workflowRequestTableFieldsField = value;
                    this.RaisePropertyChanged("workflowRequestTableFields");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowRequestTableField", Namespace="http://webservices.workflow.weaver")]
    [System.SerializableAttribute()]
    public partial class WorkflowRequestTableField : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string browserurlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool editField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fieldDBTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fieldFormNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fieldHtmlTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fieldIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fieldOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fieldShowNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fieldShowValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fieldTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fieldValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string filedHtmlShowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool mandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.ArrayOfString selectnamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private E9_Workflow.E9WorkflowService.ArrayOfString selectvaluesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool viewField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string browserurl {
            get {
                return this.browserurlField;
            }
            set {
                if ((object.ReferenceEquals(this.browserurlField, value) != true)) {
                    this.browserurlField = value;
                    this.RaisePropertyChanged("browserurl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool edit {
            get {
                return this.editField;
            }
            set {
                if ((this.editField.Equals(value) != true)) {
                    this.editField = value;
                    this.RaisePropertyChanged("edit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fieldDBType {
            get {
                return this.fieldDBTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldDBTypeField, value) != true)) {
                    this.fieldDBTypeField = value;
                    this.RaisePropertyChanged("fieldDBType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fieldFormName {
            get {
                return this.fieldFormNameField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldFormNameField, value) != true)) {
                    this.fieldFormNameField = value;
                    this.RaisePropertyChanged("fieldFormName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fieldHtmlType {
            get {
                return this.fieldHtmlTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldHtmlTypeField, value) != true)) {
                    this.fieldHtmlTypeField = value;
                    this.RaisePropertyChanged("fieldHtmlType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fieldId {
            get {
                return this.fieldIdField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldIdField, value) != true)) {
                    this.fieldIdField = value;
                    this.RaisePropertyChanged("fieldId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fieldName {
            get {
                return this.fieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldNameField, value) != true)) {
                    this.fieldNameField = value;
                    this.RaisePropertyChanged("fieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fieldOrder {
            get {
                return this.fieldOrderField;
            }
            set {
                if ((this.fieldOrderField.Equals(value) != true)) {
                    this.fieldOrderField = value;
                    this.RaisePropertyChanged("fieldOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fieldShowName {
            get {
                return this.fieldShowNameField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldShowNameField, value) != true)) {
                    this.fieldShowNameField = value;
                    this.RaisePropertyChanged("fieldShowName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fieldShowValue {
            get {
                return this.fieldShowValueField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldShowValueField, value) != true)) {
                    this.fieldShowValueField = value;
                    this.RaisePropertyChanged("fieldShowValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fieldType {
            get {
                return this.fieldTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldTypeField, value) != true)) {
                    this.fieldTypeField = value;
                    this.RaisePropertyChanged("fieldType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fieldValue {
            get {
                return this.fieldValueField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldValueField, value) != true)) {
                    this.fieldValueField = value;
                    this.RaisePropertyChanged("fieldValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string filedHtmlShow {
            get {
                return this.filedHtmlShowField;
            }
            set {
                if ((object.ReferenceEquals(this.filedHtmlShowField, value) != true)) {
                    this.filedHtmlShowField = value;
                    this.RaisePropertyChanged("filedHtmlShow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool mand {
            get {
                return this.mandField;
            }
            set {
                if ((this.mandField.Equals(value) != true)) {
                    this.mandField = value;
                    this.RaisePropertyChanged("mand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.ArrayOfString selectnames {
            get {
                return this.selectnamesField;
            }
            set {
                if ((object.ReferenceEquals(this.selectnamesField, value) != true)) {
                    this.selectnamesField = value;
                    this.RaisePropertyChanged("selectnames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public E9_Workflow.E9WorkflowService.ArrayOfString selectvalues {
            get {
                return this.selectvaluesField;
            }
            set {
                if ((object.ReferenceEquals(this.selectvaluesField, value) != true)) {
                    this.selectvaluesField = value;
                    this.RaisePropertyChanged("selectvalues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool view {
            get {
                return this.viewField;
            }
            set {
                if ((this.viewField.Equals(value) != true)) {
                    this.viewField = value;
                    this.RaisePropertyChanged("view");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="webservices.services.weaver.com.cn", ConfigurationName="E9WorkflowService.WorkflowServicePortType")]
    public interface WorkflowServicePortType {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo getWorkflowRequest(int in0, int in1, int in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo> getWorkflowRequestAsync(int in0, int in1, int in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getHendledWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getHendledWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequest4split", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo getWorkflowRequest4split(int in0, int in1, int in2, int in3);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequest4split", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo> getWorkflowRequest4splitAsync(int in0, int in1, int in2, int in3);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.submitWorkflowRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string submitWorkflowRequest(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1, int in2, string in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.submitWorkflowRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> submitWorkflowRequestAsync(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1, int in2, string in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestCount4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getMyWorkflowRequestCount4OS(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestCount4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getMyWorkflowRequestCount4OSAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestList4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getCCWorkflowRequestList4OS(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestList4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getCCWorkflowRequestList4OSAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getLeaveDays", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string getLeaveDays(string in0, string in1, string in2, string in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getLeaveDays", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> getLeaveDaysAsync(string in0, string in1, string in2, string in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestList4Ofs" +
            "", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getHendledWorkflowRequestList4Ofs(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestList4Ofs" +
            "", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getHendledWorkflowRequestList4OfsAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowBaseInfo[] getCreateWorkflowList(int in0, int in1, int in2, int in3, int in4, E9_Workflow.E9WorkflowService.ArrayOfString in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowBaseInfo[]> getCreateWorkflowListAsync(int in0, int in1, int in2, int in3, int in4, E9_Workflow.E9WorkflowService.ArrayOfString in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getProcessedWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getProcessedWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.doCreateRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string doCreateRequest(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.doCreateRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> doCreateRequestAsync(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.doCreateWorkflowRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string doCreateWorkflowRequest(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.doCreateWorkflowRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> doCreateWorkflowRequestAsync(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestCount4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getToDoWorkflowRequestCount4OS(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestCount4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getToDoWorkflowRequestCount4OSAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.doForceOver", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string doForceOver(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.doForceOver", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> doForceOverAsync(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getProcessedWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getProcessedWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowRequestInfo", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo getCreateWorkflowRequestInfo(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowRequestInfo", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo> getCreateWorkflowRequestInfoAsync(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowTypeList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowBaseInfo[] getCreateWorkflowTypeList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowTypeList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowBaseInfo[]> getCreateWorkflowTypeListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestCount4Of" +
            "s", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getHendledWorkflowRequestCount4Ofs(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestCount4Of" +
            "s", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getHendledWorkflowRequestCount4OfsAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestList4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getMyWorkflowRequestList4OS(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestList4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getMyWorkflowRequestList4OSAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestList4O" +
            "S", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getProcessedWorkflowRequestList4OS(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestList4O" +
            "S", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getProcessedWorkflowRequestList4OSAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getForwardWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getForwardWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getForwardWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getForwardWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getToDoWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getToDoWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.givingOpinions", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string givingOpinions(int in0, int in1, string in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.givingOpinions", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> givingOpinionsAsync(int in0, int in1, string in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getCCWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getCCWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestCount4" +
            "OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getProcessedWorkflowRequestCount4OS(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestCount4" +
            "OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getProcessedWorkflowRequestCount4OSAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getBeRejectWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getBeRejectWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getBeRejectWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getBeRejectWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.forward2WorkflowRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string forward2WorkflowRequest(int in0, string in1, string in2, int in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.forward2WorkflowRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> forward2WorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getAllWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getAllWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getAllWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getAllWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getToDoWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getToDoWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestCount4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getCCWorkflowRequestCount4OS(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestCount4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getCCWorkflowRequestCount4OSAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getHendledWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getHendledWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestList4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getToDoWorkflowRequestList4OS(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestList4OS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getToDoWorkflowRequestList4OSAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToBeReadWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getToBeReadWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToBeReadWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getToBeReadWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getCreateWorkflowCount(int in0, int in1, E9_Workflow.E9WorkflowService.ArrayOfString in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getCreateWorkflowCountAsync(int in0, int in1, E9_Workflow.E9WorkflowService.ArrayOfString in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.forwardWorkflowRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string forwardWorkflowRequest(int in0, string in1, string in2, int in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.forwardWorkflowRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> forwardWorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToBeReadWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getToBeReadWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getToBeReadWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getToBeReadWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getBeRejectWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getBeRejectWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getBeRejectWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getBeRejectWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getCCWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getCCWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getAllWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getAllWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getAllWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getAllWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getDoingWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getDoingWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getDoingWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getDoingWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getForwardWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getForwardWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getForwardWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getForwardWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getMyWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getMyWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getMyWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getMyWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getWorkflowNewFlag", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.ArrayOfString getWorkflowNewFlag(E9_Workflow.E9WorkflowService.ArrayOfString in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getWorkflowNewFlag", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.ArrayOfString> getWorkflowNewFlagAsync(E9_Workflow.E9WorkflowService.ArrayOfString in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.writeWorkflowReadFlag", ReplyAction="*")]
        void writeWorkflowReadFlag(string in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.writeWorkflowReadFlag", ReplyAction="*")]
        System.Threading.Tasks.Task writeWorkflowReadFlagAsync(string in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowTypeCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getCreateWorkflowTypeCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowTypeCount", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getCreateWorkflowTypeCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequestLogs", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestLog[] getWorkflowRequestLogs(string in0, string in1, int in2, int in3, int in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequestLogs", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestLog[]> getWorkflowRequestLogsAsync(string in0, string in1, int in2, int in3, int in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.deleteRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        bool deleteRequest(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.deleteRequest", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<bool> deleteRequestAsync(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getUserid", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string getUserId(string in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getUserid", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> getUserIdAsync(string in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getDoingWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getDoingWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:weaver.workflow.webservices.WorkflowService.getDoingWorkflowRequestList", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getDoingWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WorkflowServicePortTypeChannel : E9_Workflow.E9WorkflowService.WorkflowServicePortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkflowServicePortTypeClient : System.ServiceModel.ClientBase<E9_Workflow.E9WorkflowService.WorkflowServicePortType>, E9_Workflow.E9WorkflowService.WorkflowServicePortType {
        
        public WorkflowServicePortTypeClient() {
        }
        
        public WorkflowServicePortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WorkflowServicePortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkflowServicePortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkflowServicePortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo getWorkflowRequest(int in0, int in1, int in2) {
            return base.Channel.getWorkflowRequest(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo> getWorkflowRequestAsync(int in0, int in1, int in2) {
            return base.Channel.getWorkflowRequestAsync(in0, in1, in2);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getHendledWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getHendledWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getHendledWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getHendledWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo getWorkflowRequest4split(int in0, int in1, int in2, int in3) {
            return base.Channel.getWorkflowRequest4split(in0, in1, in2, in3);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo> getWorkflowRequest4splitAsync(int in0, int in1, int in2, int in3) {
            return base.Channel.getWorkflowRequest4splitAsync(in0, in1, in2, in3);
        }
        
        public string submitWorkflowRequest(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1, int in2, string in3, string in4) {
            return base.Channel.submitWorkflowRequest(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<string> submitWorkflowRequestAsync(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1, int in2, string in3, string in4) {
            return base.Channel.submitWorkflowRequestAsync(in0, in1, in2, in3, in4);
        }
        
        public int getMyWorkflowRequestCount4OS(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getMyWorkflowRequestCount4OS(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<int> getMyWorkflowRequestCount4OSAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getMyWorkflowRequestCount4OSAsync(in0, in1, in2);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getCCWorkflowRequestList4OS(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getCCWorkflowRequestList4OS(in0, in1, in2, in3, in4, in5);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getCCWorkflowRequestList4OSAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getCCWorkflowRequestList4OSAsync(in0, in1, in2, in3, in4, in5);
        }
        
        public string getLeaveDays(string in0, string in1, string in2, string in3, string in4) {
            return base.Channel.getLeaveDays(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<string> getLeaveDaysAsync(string in0, string in1, string in2, string in3, string in4) {
            return base.Channel.getLeaveDaysAsync(in0, in1, in2, in3, in4);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getHendledWorkflowRequestList4Ofs(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getHendledWorkflowRequestList4Ofs(in0, in1, in2, in3, in4, in5);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getHendledWorkflowRequestList4OfsAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getHendledWorkflowRequestList4OfsAsync(in0, in1, in2, in3, in4, in5);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowBaseInfo[] getCreateWorkflowList(int in0, int in1, int in2, int in3, int in4, E9_Workflow.E9WorkflowService.ArrayOfString in5) {
            return base.Channel.getCreateWorkflowList(in0, in1, in2, in3, in4, in5);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowBaseInfo[]> getCreateWorkflowListAsync(int in0, int in1, int in2, int in3, int in4, E9_Workflow.E9WorkflowService.ArrayOfString in5) {
            return base.Channel.getCreateWorkflowListAsync(in0, in1, in2, in3, in4, in5);
        }
        
        public int getProcessedWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getProcessedWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getProcessedWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getProcessedWorkflowRequestCountAsync(in0, in1);
        }
        
        public string doCreateRequest(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1) {
            return base.Channel.doCreateRequest(in0, in1);
        }
        
        public System.Threading.Tasks.Task<string> doCreateRequestAsync(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1) {
            return base.Channel.doCreateRequestAsync(in0, in1);
        }
        
        public string doCreateWorkflowRequest(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1) {
            return base.Channel.doCreateWorkflowRequest(in0, in1);
        }
        
        public System.Threading.Tasks.Task<string> doCreateWorkflowRequestAsync(E9_Workflow.E9WorkflowService.WorkflowRequestInfo in0, int in1) {
            return base.Channel.doCreateWorkflowRequestAsync(in0, in1);
        }
        
        public int getToDoWorkflowRequestCount4OS(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getToDoWorkflowRequestCount4OS(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<int> getToDoWorkflowRequestCount4OSAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getToDoWorkflowRequestCount4OSAsync(in0, in1, in2);
        }
        
        public string doForceOver(int in0, int in1) {
            return base.Channel.doForceOver(in0, in1);
        }
        
        public System.Threading.Tasks.Task<string> doForceOverAsync(int in0, int in1) {
            return base.Channel.doForceOverAsync(in0, in1);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getProcessedWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getProcessedWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getProcessedWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getProcessedWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo getCreateWorkflowRequestInfo(int in0, int in1) {
            return base.Channel.getCreateWorkflowRequestInfo(in0, in1);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo> getCreateWorkflowRequestInfoAsync(int in0, int in1) {
            return base.Channel.getCreateWorkflowRequestInfoAsync(in0, in1);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowBaseInfo[] getCreateWorkflowTypeList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getCreateWorkflowTypeList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowBaseInfo[]> getCreateWorkflowTypeListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getCreateWorkflowTypeListAsync(in0, in1, in2, in3, in4);
        }
        
        public int getHendledWorkflowRequestCount4Ofs(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getHendledWorkflowRequestCount4Ofs(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<int> getHendledWorkflowRequestCount4OfsAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getHendledWorkflowRequestCount4OfsAsync(in0, in1, in2);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getMyWorkflowRequestList4OS(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getMyWorkflowRequestList4OS(in0, in1, in2, in3, in4, in5);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getMyWorkflowRequestList4OSAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getMyWorkflowRequestList4OSAsync(in0, in1, in2, in3, in4, in5);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getProcessedWorkflowRequestList4OS(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getProcessedWorkflowRequestList4OS(in0, in1, in2, in3, in4, in5);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getProcessedWorkflowRequestList4OSAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getProcessedWorkflowRequestList4OSAsync(in0, in1, in2, in3, in4, in5);
        }
        
        public int getForwardWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getForwardWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getForwardWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getForwardWorkflowRequestCountAsync(in0, in1);
        }
        
        public int getToDoWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getToDoWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getToDoWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getToDoWorkflowRequestCountAsync(in0, in1);
        }
        
        public string givingOpinions(int in0, int in1, string in2) {
            return base.Channel.givingOpinions(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<string> givingOpinionsAsync(int in0, int in1, string in2) {
            return base.Channel.givingOpinionsAsync(in0, in1, in2);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getCCWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getCCWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getCCWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getCCWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public int getProcessedWorkflowRequestCount4OS(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getProcessedWorkflowRequestCount4OS(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<int> getProcessedWorkflowRequestCount4OSAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getProcessedWorkflowRequestCount4OSAsync(in0, in1, in2);
        }
        
        public int getBeRejectWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getBeRejectWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getBeRejectWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getBeRejectWorkflowRequestCountAsync(in0, in1);
        }
        
        public string forward2WorkflowRequest(int in0, string in1, string in2, int in3, string in4) {
            return base.Channel.forward2WorkflowRequest(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<string> forward2WorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4) {
            return base.Channel.forward2WorkflowRequestAsync(in0, in1, in2, in3, in4);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getAllWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getAllWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getAllWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getAllWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getToDoWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getToDoWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getToDoWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getToDoWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public int getCCWorkflowRequestCount4OS(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getCCWorkflowRequestCount4OS(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<int> getCCWorkflowRequestCount4OSAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getCCWorkflowRequestCount4OSAsync(in0, in1, in2);
        }
        
        public int getHendledWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getHendledWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getHendledWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getHendledWorkflowRequestCountAsync(in0, in1);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getToDoWorkflowRequestList4OS(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getToDoWorkflowRequestList4OS(in0, in1, in2, in3, in4, in5);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getToDoWorkflowRequestList4OSAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getToDoWorkflowRequestList4OSAsync(in0, in1, in2, in3, in4, in5);
        }
        
        public int getToBeReadWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getToBeReadWorkflowRequestCount(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<int> getToBeReadWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getToBeReadWorkflowRequestCountAsync(in0, in1, in2);
        }
        
        public int getCreateWorkflowCount(int in0, int in1, E9_Workflow.E9WorkflowService.ArrayOfString in2) {
            return base.Channel.getCreateWorkflowCount(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<int> getCreateWorkflowCountAsync(int in0, int in1, E9_Workflow.E9WorkflowService.ArrayOfString in2) {
            return base.Channel.getCreateWorkflowCountAsync(in0, in1, in2);
        }
        
        public string forwardWorkflowRequest(int in0, string in1, string in2, int in3, string in4) {
            return base.Channel.forwardWorkflowRequest(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<string> forwardWorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4) {
            return base.Channel.forwardWorkflowRequestAsync(in0, in1, in2, in3, in4);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getToBeReadWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getToBeReadWorkflowRequestList(in0, in1, in2, in3, in4, in5);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getToBeReadWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getToBeReadWorkflowRequestListAsync(in0, in1, in2, in3, in4, in5);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getBeRejectWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getBeRejectWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getBeRejectWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getBeRejectWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public int getCCWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getCCWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getCCWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getCCWorkflowRequestCountAsync(in0, in1);
        }
        
        public int getAllWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getAllWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getAllWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getAllWorkflowRequestCountAsync(in0, in1);
        }
        
        public int getDoingWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getDoingWorkflowRequestCount(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<int> getDoingWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1, bool in2) {
            return base.Channel.getDoingWorkflowRequestCountAsync(in0, in1, in2);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getForwardWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getForwardWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getForwardWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getForwardWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getMyWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getMyWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getMyWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4) {
            return base.Channel.getMyWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public int getMyWorkflowRequestCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getMyWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getMyWorkflowRequestCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getMyWorkflowRequestCountAsync(in0, in1);
        }
        
        public E9_Workflow.E9WorkflowService.ArrayOfString getWorkflowNewFlag(E9_Workflow.E9WorkflowService.ArrayOfString in0, string in1) {
            return base.Channel.getWorkflowNewFlag(in0, in1);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.ArrayOfString> getWorkflowNewFlagAsync(E9_Workflow.E9WorkflowService.ArrayOfString in0, string in1) {
            return base.Channel.getWorkflowNewFlagAsync(in0, in1);
        }
        
        public void writeWorkflowReadFlag(string in0, string in1) {
            base.Channel.writeWorkflowReadFlag(in0, in1);
        }
        
        public System.Threading.Tasks.Task writeWorkflowReadFlagAsync(string in0, string in1) {
            return base.Channel.writeWorkflowReadFlagAsync(in0, in1);
        }
        
        public int getCreateWorkflowTypeCount(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getCreateWorkflowTypeCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getCreateWorkflowTypeCountAsync(int in0, E9_Workflow.E9WorkflowService.ArrayOfString in1) {
            return base.Channel.getCreateWorkflowTypeCountAsync(in0, in1);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestLog[] getWorkflowRequestLogs(string in0, string in1, int in2, int in3, int in4) {
            return base.Channel.getWorkflowRequestLogs(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestLog[]> getWorkflowRequestLogsAsync(string in0, string in1, int in2, int in3, int in4) {
            return base.Channel.getWorkflowRequestLogsAsync(in0, in1, in2, in3, in4);
        }
        
        public bool deleteRequest(int in0, int in1) {
            return base.Channel.deleteRequest(in0, in1);
        }
        
        public System.Threading.Tasks.Task<bool> deleteRequestAsync(int in0, int in1) {
            return base.Channel.deleteRequestAsync(in0, in1);
        }
        
        public string getUserId(string in0, string in1) {
            return base.Channel.getUserId(in0, in1);
        }
        
        public System.Threading.Tasks.Task<string> getUserIdAsync(string in0, string in1) {
            return base.Channel.getUserIdAsync(in0, in1);
        }
        
        public E9_Workflow.E9WorkflowService.WorkflowRequestInfo[] getDoingWorkflowRequestList(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getDoingWorkflowRequestList(in0, in1, in2, in3, in4, in5);
        }
        
        public System.Threading.Tasks.Task<E9_Workflow.E9WorkflowService.WorkflowRequestInfo[]> getDoingWorkflowRequestListAsync(int in0, int in1, int in2, int in3, E9_Workflow.E9WorkflowService.ArrayOfString in4, bool in5) {
            return base.Channel.getDoingWorkflowRequestListAsync(in0, in1, in2, in3, in4, in5);
        }
    }
}
