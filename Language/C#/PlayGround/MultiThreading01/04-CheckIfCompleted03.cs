using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace TestCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            // 使用信号量的真实使用场景是，在多线程操作的同时，又做了另外一件事，两件事都完成时才算完成
            Action<string> action = DoSomethingLong;
            IAsyncResult asyncResult = action.BeginInvoke("uploading...", null, null);

            // 其它的异步任务
            Action<int> action2 = ((time) => { Thread.Sleep(time); Console.WriteLine($"Thread_{time}ms is done."); });
            action2.BeginInvoke(6000, null, null);
            action2.BeginInvoke(8000, null, null);

            // 现在做另一件事（同步任务）
            Enumerable.Range(1, 32).ToList().ForEach(i =>
            {
                Thread.Sleep(100);
                Console.WriteLine($"{i}... ...");
            });

            // 阻塞当前进程（action与主线程，但是与action2没有关系），直到收到信号量，信号量从asyncResult中发出，无延迟
            asyncResult.AsyncWaitHandle.WaitOne();
            Console.WriteLine("Completed.");

            Console.ReadKey();
        }

        private static void DoSomethingLong(string name)
        {
            Console.WriteLine("********************DoSomethingLong start {0} {{{1}}} {2}********************",
                name, Thread.CurrentThread.ManagedThreadId.ToString("00"), DateTime.Now.ToString("HHmmss:fff"));

            long lResult = 0;
            for (int i = 0; i < 1000000000; i++)
            {
                lResult += i;
            }

            Console.WriteLine("********************DoSomethingLong   end {0} {{{1}}} {2} {3}********************",
                name, Thread.CurrentThread.ManagedThreadId.ToString("00"), DateTime.Now.ToString("HHmmss:fff"), lResult);
        }
    }
}

/*
使用信号量来探测多线程操作是否完成，这里发现主线程任务与异步线程任务都完成时，才输出完成，
可以调整主线程循环的次数，让主线程任务比子线程快或者慢，发现都是二者都完成时，信号量才有结果。
但是信号量与其他子线程（这里的action2）没有关系，只与相关子线程+主线程有关。

********************DoSomethingLong start uploading... {03} 111033:051********************
1... ...
2... ...
3... ...
4... ...
5... ...
6... ...
7... ...
8... ...
9... ...
10... ...
11... ...
12... ...
13... ...
14... ...
15... ...
16... ...
17... ...
18... ...
19... ...
20... ...
21... ...
22... ...
23... ...
24... ...
25... ...
26... ...
27... ...
28... ...
********************DoSomethingLong   end uploading... {03} 111035:882 499999999500000000********************
29... ...
30... ...
31... ...
32... ...
Completed.
Thread_6000ms is done.
Thread_8000ms is done.
*/