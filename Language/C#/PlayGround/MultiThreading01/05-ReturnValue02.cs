using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace TestCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            // 获取异步操作的结果，也可以在回调函数中操作
            Func<long> func = DoSomethingLong;
            IAsyncResult asyncResult = func.BeginInvoke(ar =>
            {
                long result = func.EndInvoke(ar);
                Console.WriteLine($"执行结果为：{result}");
            }, null);

            // 现在做另一件事
            Enumerable.Range(1, 32).ToList().ForEach(i =>
            {
                Thread.Sleep(100);
                Console.WriteLine($"{i}... ...");
            });

            Console.ReadKey();
        }

        private static long DoSomethingLong()
        {
            long lResult = 0;
            for (int i = 0; i < 1000000000; i++)
            {
                lResult += i;
            }

            return lResult;
        }
    }
}

/*
在回调函数中获取子线程的结果，这样不会阻塞。

1... ...
2... ...
3... ...
4... ...
5... ...
6... ...
7... ...
8... ...
9... ...
10... ...
11... ...
12... ...
13... ...
14... ...
15... ...
16... ...
17... ...
18... ...
19... ...
20... ...
21... ...
22... ...
23... ...
24... ...
25... ...
26... ...
27... ...
28... ...
执行结果为：499999999500000000
29... ...
30... ...
31... ...
32... ...
*/