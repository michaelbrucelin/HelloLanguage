'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1378
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace LinqInAction.Chapter14

  <System.Data.Linq.Mapping.DatabaseAttribute(Name:="lia")> _
 Partial Public Class LinqBooks
    Inherits System.Data.Linq.DataContext

    Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource

#Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAuthor(ByVal instance As Author)
    End Sub
    Partial Private Sub UpdateAuthor(ByVal instance As Author)
    End Sub
    Partial Private Sub DeleteAuthor(ByVal instance As Author)
    End Sub
    Partial Private Sub InsertBook(ByVal instance As Book)
    End Sub
    Partial Private Sub UpdateBook(ByVal instance As Book)
    End Sub
    Partial Private Sub DeleteBook(ByVal instance As Book)
    End Sub
    Partial Private Sub InsertBookAuthor(ByVal instance As BookAuthor)
    End Sub
    Partial Private Sub UpdateBookAuthor(ByVal instance As BookAuthor)
    End Sub
    Partial Private Sub DeleteBookAuthor(ByVal instance As BookAuthor)
    End Sub
    Partial Private Sub InsertPublisher(ByVal instance As Publisher)
    End Sub
    Partial Private Sub UpdatePublisher(ByVal instance As Publisher)
    End Sub
    Partial Private Sub DeletePublisher(ByVal instance As Publisher)
    End Sub
    Partial Private Sub InsertReview(ByVal instance As Review)
    End Sub
    Partial Private Sub UpdateReview(ByVal instance As Review)
    End Sub
    Partial Private Sub DeleteReview(ByVal instance As Review)
    End Sub
    Partial Private Sub InsertSubject(ByVal instance As Subject)
    End Sub
    Partial Private Sub UpdateSubject(ByVal instance As Subject)
    End Sub
    Partial Private Sub DeleteSubject(ByVal instance As Subject)
    End Sub
    Partial Private Sub InsertUser(ByVal instance As User)
    End Sub
    Partial Private Sub UpdateUser(ByVal instance As User)
    End Sub
    Partial Private Sub DeleteUser(ByVal instance As User)
    End Sub
#End Region

    Shared Sub New()
    End Sub

    Public Sub New(ByVal connection As String)
      MyBase.New(connection, mappingSource)
      OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection)
      MyBase.New(connection, mappingSource)
      OnCreated()
    End Sub

    Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
      MyBase.New(connection, mappingSource)
      OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
      MyBase.New(connection, mappingSource)
      OnCreated()
    End Sub

    Public ReadOnly Property Author() As System.Data.Linq.Table(Of Author)
      Get
        Return Me.GetTable(Of Author)()
      End Get
    End Property

    Public ReadOnly Property Book() As System.Data.Linq.Table(Of Book)
      Get
        Return Me.GetTable(Of Book)()
      End Get
    End Property

    Public ReadOnly Property BookAuthor() As System.Data.Linq.Table(Of BookAuthor)
      Get
        Return Me.GetTable(Of BookAuthor)()
      End Get
    End Property

    Public ReadOnly Property Publisher() As System.Data.Linq.Table(Of Publisher)
      Get
        Return Me.GetTable(Of Publisher)()
      End Get
    End Property

    Public ReadOnly Property Review() As System.Data.Linq.Table(Of Review)
      Get
        Return Me.GetTable(Of Review)()
      End Get
    End Property

    Public ReadOnly Property Subject() As System.Data.Linq.Table(Of Subject)
      Get
        Return Me.GetTable(Of Subject)()
      End Get
    End Property

    Public ReadOnly Property User() As System.Data.Linq.Table(Of User)
      Get
        Return Me.GetTable(Of User)()
      End Get
    End Property
  End Class

  <Table(Name:="dbo.Author")> _
  Partial Public Class Author
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ID As System.Guid

    Private _LastName As String

    Private _FirstName As String

    Private _WebSite As String

    Private _BookAuthor As EntitySet(Of BookAuthor)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate()
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnWebSiteChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnWebSiteChanged()
    End Sub
#End Region

    Public Sub New()
      MyBase.New()
      OnCreated()
      Me._BookAuthor = New EntitySet(Of BookAuthor)(AddressOf Me.attach_BookAuthor, AddressOf Me.detach_BookAuthor)
    End Sub

    <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
    Public Property ID() As System.Guid
      Get
        Return Me._ID
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._ID = Value) _
           = False) Then
          Me.OnIDChanging(Value)
          Me.SendPropertyChanging()
          Me._ID = Value
          Me.SendPropertyChanged("ID")
          Me.OnIDChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property LastName() As String
      Get
        Return Me._LastName
      End Get
      Set(ByVal value As String)
        If ((Me._LastName = Value) _
           = False) Then
          Me.OnLastNameChanging(Value)
          Me.SendPropertyChanging()
          Me._LastName = Value
          Me.SendPropertyChanged("LastName")
          Me.OnLastNameChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_FirstName", DbType:="VarChar(30)")> _
    Public Property FirstName() As String
      Get
        Return Me._FirstName
      End Get
      Set(ByVal value As String)
        If ((Me._FirstName = Value) _
           = False) Then
          Me.OnFirstNameChanging(Value)
          Me.SendPropertyChanging()
          Me._FirstName = Value
          Me.SendPropertyChanged("FirstName")
          Me.OnFirstNameChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_WebSite", DbType:="VarChar(200)")> _
    Public Property WebSite() As String
      Get
        Return Me._WebSite
      End Get
      Set(ByVal value As String)
        If ((Me._WebSite = Value) _
           = False) Then
          Me.OnWebSiteChanging(Value)
          Me.SendPropertyChanging()
          Me._WebSite = Value
          Me.SendPropertyChanged("WebSite")
          Me.OnWebSiteChanged()
        End If
      End Set
    End Property

    <Association(Name:="FK_BookAuthor_Author", Storage:="_BookAuthor", OtherKey:="Author", DeleteRule:="NO ACTION")> _
    Public Property BookAuthor() As EntitySet(Of BookAuthor)
      Get
        Return Me._BookAuthor
      End Get
      Set(ByVal value As EntitySet(Of BookAuthor))
        Me._BookAuthor.Assign(Value)
      End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
    End Sub

    Private Sub attach_BookAuthor(ByVal entity As BookAuthor)
      Me.SendPropertyChanging()
      entity.AuthorAuthor = Me
      Me.SendPropertyChanged("BookAuthor")
    End Sub

    Private Sub detach_BookAuthor(ByVal entity As BookAuthor)
      Me.SendPropertyChanging()
      entity.AuthorAuthor = Nothing
      Me.SendPropertyChanged("BookAuthor")
    End Sub
  End Class

  <Table(Name:="dbo.Book")> _
  Partial Public Class Book
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ID As System.Guid

    Private _Title As String

    Private _Subject As System.Guid

    Private _Publisher As System.Guid

    Private _PubDate As System.Nullable(Of Date)

    Private _Price As System.Nullable(Of Decimal)

    Private _PageCount As Integer

    Private _Isbn As String

    Private _Summary As String

    Private _Notes As String

    Private _PublisherPublisher As EntityRef(Of Publisher)

    Private _SubjectSubject As EntityRef(Of Subject)

    Private _BookAuthor As EntitySet(Of BookAuthor)

    Private _Review As EntitySet(Of Review)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate()
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnSubjectChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnSubjectChanged()
    End Sub
    Partial Private Sub OnPublisherChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnPublisherChanged()
    End Sub
    Partial Private Sub OnPubDateChanging(ByVal value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPubDateChanged()
    End Sub
    Partial Private Sub OnPriceChanging(ByVal value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnPageCountChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnPageCountChanged()
    End Sub
    Partial Private Sub OnIsbnChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnIsbnChanged()
    End Sub
    Partial Private Sub OnSummaryChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnSummaryChanged()
    End Sub
    Partial Private Sub OnNotesChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
#End Region

    Public Sub New()
      MyBase.New()
      OnCreated()
      Me._PublisherPublisher = CType(Nothing, EntityRef(Of Publisher))
      Me._SubjectSubject = CType(Nothing, EntityRef(Of Subject))
      Me._BookAuthor = New EntitySet(Of BookAuthor)(AddressOf Me.attach_BookAuthor, AddressOf Me.detach_BookAuthor)
      Me._Review = New EntitySet(Of Review)(AddressOf Me.attach_Review, AddressOf Me.detach_Review)
    End Sub

    <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
    Public Property ID() As System.Guid
      Get
        Return Me._ID
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._ID = Value) _
           = False) Then
          Me.OnIDChanging(Value)
          Me.SendPropertyChanging()
          Me._ID = Value
          Me.SendPropertyChanged("ID")
          Me.OnIDChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Title", DbType:="VarChar(100) NOT NULL", CanBeNull:=False)> _
    Public Property Title() As String
      Get
        Return Me._Title
      End Get
      Set(ByVal value As String)
        If ((Me._Title = Value) _
           = False) Then
          Me.OnTitleChanging(Value)
          Me.SendPropertyChanging()
          Me._Title = Value
          Me.SendPropertyChanged("Title")
          Me.OnTitleChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Subject", DbType:="UniqueIdentifier NOT NULL")> _
    Public Property Subject() As System.Guid
      Get
        Return Me._Subject
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._Subject = Value) _
           = False) Then
          If Me._SubjectSubject.HasLoadedOrAssignedValue Then
            Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
          End If
          Me.OnSubjectChanging(Value)
          Me.SendPropertyChanging()
          Me._Subject = Value
          Me.SendPropertyChanged("Subject")
          Me.OnSubjectChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Publisher", DbType:="UniqueIdentifier NOT NULL")> _
    Public Property Publisher() As System.Guid
      Get
        Return Me._Publisher
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._Publisher = Value) _
           = False) Then
          If Me._PublisherPublisher.HasLoadedOrAssignedValue Then
            Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
          End If
          Me.OnPublisherChanging(Value)
          Me.SendPropertyChanging()
          Me._Publisher = Value
          Me.SendPropertyChanged("Publisher")
          Me.OnPublisherChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_PubDate", DbType:="DateTime")> _
    Public Property PubDate() As System.Nullable(Of Date)
      Get
        Return Me._PubDate
      End Get
      Set(ByVal value As System.Nullable(Of Date))
        If (Me._PubDate.Equals(Value) = False) Then
          Me.OnPubDateChanging(Value)
          Me.SendPropertyChanging()
          Me._PubDate = Value
          Me.SendPropertyChanged("PubDate")
          Me.OnPubDateChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Price", DbType:="Money")> _
    Public Property Price() As System.Nullable(Of Decimal)
      Get
        Return Me._Price
      End Get
      Set(ByVal value As System.Nullable(Of Decimal))
        If (Me._Price.Equals(Value) = False) Then
          Me.OnPriceChanging(Value)
          Me.SendPropertyChanging()
          Me._Price = Value
          Me.SendPropertyChanged("Price")
          Me.OnPriceChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_PageCount", DbType:="Int NOT NULL")> _
    Public Property PageCount() As Integer
      Get
        Return Me._PageCount
      End Get
      Set(ByVal value As Integer)
        If ((Me._PageCount = Value) _
           = False) Then
          Me.OnPageCountChanging(Value)
          Me.SendPropertyChanging()
          Me._PageCount = Value
          Me.SendPropertyChanged("PageCount")
          Me.OnPageCountChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Isbn", DbType:="NChar(13)")> _
    Public Property Isbn() As String
      Get
        Return Me._Isbn
      End Get
      Set(ByVal value As String)
        If ((Me._Isbn = Value) _
           = False) Then
          Me.OnIsbnChanging(Value)
          Me.SendPropertyChanging()
          Me._Isbn = Value
          Me.SendPropertyChanged("Isbn")
          Me.OnIsbnChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Summary", DbType:="VarChar(2000)")> _
    Public Property Summary() As String
      Get
        Return Me._Summary
      End Get
      Set(ByVal value As String)
        If ((Me._Summary = Value) _
           = False) Then
          Me.OnSummaryChanging(Value)
          Me.SendPropertyChanging()
          Me._Summary = Value
          Me.SendPropertyChanged("Summary")
          Me.OnSummaryChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Notes", DbType:="VarChar(2000)")> _
    Public Property Notes() As String
      Get
        Return Me._Notes
      End Get
      Set(ByVal value As String)
        If ((Me._Notes = Value) _
           = False) Then
          Me.OnNotesChanging(Value)
          Me.SendPropertyChanging()
          Me._Notes = Value
          Me.SendPropertyChanged("Notes")
          Me.OnNotesChanged()
        End If
      End Set
    End Property

    <Association(Name:="FK_Book_Publisher", Storage:="_PublisherPublisher", ThisKey:="Publisher", IsForeignKey:=True)> _
    Public Property PublisherPublisher() As Publisher
      Get
        Return Me._PublisherPublisher.Entity
      End Get
      Set(ByVal value As Publisher)
        Dim previousValue As Publisher = Me._PublisherPublisher.Entity
        If (((previousValue Is Value) _
           = False) _
           OrElse (Me._PublisherPublisher.HasLoadedOrAssignedValue = False)) Then
          Me.SendPropertyChanging()
          If ((previousValue Is Nothing) _
             = False) Then
            Me._PublisherPublisher.Entity = Nothing
            previousValue.Book.Remove(Me)
          End If
          Me._PublisherPublisher.Entity = Value
          If ((Value Is Nothing) _
             = False) Then
            Value.Book.Add(Me)
            Me._Publisher = Value.ID
          Else
            Me._Publisher = CType(Nothing, System.Guid)
          End If
          Me.SendPropertyChanged("PublisherPublisher")
        End If
      End Set
    End Property

    <Association(Name:="FK_Book_Subject", Storage:="_SubjectSubject", ThisKey:="Subject", IsForeignKey:=True)> _
    Public Property SubjectSubject() As Subject
      Get
        Return Me._SubjectSubject.Entity
      End Get
      Set(ByVal value As Subject)
        Dim previousValue As Subject = Me._SubjectSubject.Entity
        If (((previousValue Is Value) _
           = False) _
           OrElse (Me._SubjectSubject.HasLoadedOrAssignedValue = False)) Then
          Me.SendPropertyChanging()
          If ((previousValue Is Nothing) _
             = False) Then
            Me._SubjectSubject.Entity = Nothing
            previousValue.Book.Remove(Me)
          End If
          Me._SubjectSubject.Entity = Value
          If ((Value Is Nothing) _
             = False) Then
            Value.Book.Add(Me)
            Me._Subject = Value.ID
          Else
            Me._Subject = CType(Nothing, System.Guid)
          End If
          Me.SendPropertyChanged("SubjectSubject")
        End If
      End Set
    End Property

    <Association(Name:="FK_BookAuthor_Book", Storage:="_BookAuthor", OtherKey:="Book", DeleteRule:="NO ACTION")> _
    Public Property BookAuthor() As EntitySet(Of BookAuthor)
      Get
        Return Me._BookAuthor
      End Get
      Set(ByVal value As EntitySet(Of BookAuthor))
        Me._BookAuthor.Assign(Value)
      End Set
    End Property

    <Association(Name:="FK_Review_Book", Storage:="_Review", OtherKey:="Book", DeleteRule:="NO ACTION")> _
    Public Property Review() As EntitySet(Of Review)
      Get
        Return Me._Review
      End Get
      Set(ByVal value As EntitySet(Of Review))
        Me._Review.Assign(Value)
      End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
    End Sub

    Private Sub attach_BookAuthor(ByVal entity As BookAuthor)
      Me.SendPropertyChanging()
      entity.BookBook = Me
      Me.SendPropertyChanged("BookAuthor")
    End Sub

    Private Sub detach_BookAuthor(ByVal entity As BookAuthor)
      Me.SendPropertyChanging()
      entity.BookBook = Nothing
      Me.SendPropertyChanged("BookAuthor")
    End Sub

    Private Sub attach_Review(ByVal entity As Review)
      Me.SendPropertyChanging()
      entity.BookBook = Me
      Me.SendPropertyChanged("Review")
    End Sub

    Private Sub detach_Review(ByVal entity As Review)
      Me.SendPropertyChanging()
      entity.BookBook = Nothing
      Me.SendPropertyChanged("Review")
    End Sub
  End Class

  <Table(Name:="dbo.BookAuthor")> _
  Partial Public Class BookAuthor
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _Author As System.Guid

    Private _Book As System.Guid

    Private _AuthorOrder As System.Nullable(Of Integer)

    Private _AuthorAuthor As EntityRef(Of Author)

    Private _BookBook As EntityRef(Of Book)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate()
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAuthorChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnAuthorChanged()
    End Sub
    Partial Private Sub OnBookChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnBookChanged()
    End Sub
    Partial Private Sub OnAuthorOrderChanging(ByVal value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAuthorOrderChanged()
    End Sub
#End Region

    Public Sub New()
      MyBase.New()
      OnCreated()
      Me._AuthorAuthor = CType(Nothing, EntityRef(Of Author))
      Me._BookBook = CType(Nothing, EntityRef(Of Book))
    End Sub

    <Column(Storage:="_Author", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
    Public Property Author() As System.Guid
      Get
        Return Me._Author
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._Author = Value) _
           = False) Then
          If Me._AuthorAuthor.HasLoadedOrAssignedValue Then
            Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
          End If
          Me.OnAuthorChanging(Value)
          Me.SendPropertyChanging()
          Me._Author = Value
          Me.SendPropertyChanged("Author")
          Me.OnAuthorChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Book", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
    Public Property Book() As System.Guid
      Get
        Return Me._Book
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._Book = Value) _
           = False) Then
          If Me._BookBook.HasLoadedOrAssignedValue Then
            Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
          End If
          Me.OnBookChanging(Value)
          Me.SendPropertyChanging()
          Me._Book = Value
          Me.SendPropertyChanged("Book")
          Me.OnBookChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_AuthorOrder", DbType:="Int")> _
    Public Property AuthorOrder() As System.Nullable(Of Integer)
      Get
        Return Me._AuthorOrder
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
        If (Me._AuthorOrder.Equals(Value) = False) Then
          Me.OnAuthorOrderChanging(Value)
          Me.SendPropertyChanging()
          Me._AuthorOrder = Value
          Me.SendPropertyChanged("AuthorOrder")
          Me.OnAuthorOrderChanged()
        End If
      End Set
    End Property

    <Association(Name:="FK_BookAuthor_Author", Storage:="_AuthorAuthor", ThisKey:="Author", IsForeignKey:=True)> _
    Public Property AuthorAuthor() As Author
      Get
        Return Me._AuthorAuthor.Entity
      End Get
      Set(ByVal value As Author)
        Dim previousValue As Author = Me._AuthorAuthor.Entity
        If (((previousValue Is Value) _
           = False) _
           OrElse (Me._AuthorAuthor.HasLoadedOrAssignedValue = False)) Then
          Me.SendPropertyChanging()
          If ((previousValue Is Nothing) _
             = False) Then
            Me._AuthorAuthor.Entity = Nothing
            previousValue.BookAuthor.Remove(Me)
          End If
          Me._AuthorAuthor.Entity = Value
          If ((Value Is Nothing) _
             = False) Then
            Value.BookAuthor.Add(Me)
            Me._Author = Value.ID
          Else
            Me._Author = CType(Nothing, System.Guid)
          End If
          Me.SendPropertyChanged("AuthorAuthor")
        End If
      End Set
    End Property

    <Association(Name:="FK_BookAuthor_Book", Storage:="_BookBook", ThisKey:="Book", IsForeignKey:=True)> _
    Public Property BookBook() As Book
      Get
        Return Me._BookBook.Entity
      End Get
      Set(ByVal value As Book)
        Dim previousValue As Book = Me._BookBook.Entity
        If (((previousValue Is Value) _
           = False) _
           OrElse (Me._BookBook.HasLoadedOrAssignedValue = False)) Then
          Me.SendPropertyChanging()
          If ((previousValue Is Nothing) _
             = False) Then
            Me._BookBook.Entity = Nothing
            previousValue.BookAuthor.Remove(Me)
          End If
          Me._BookBook.Entity = Value
          If ((Value Is Nothing) _
             = False) Then
            Value.BookAuthor.Add(Me)
            Me._Book = Value.ID
          Else
            Me._Book = CType(Nothing, System.Guid)
          End If
          Me.SendPropertyChanged("BookBook")
        End If
      End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
    End Sub
  End Class

  <Table(Name:="dbo.Publisher")> _
  Partial Public Class Publisher
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ID As System.Guid

    Private _Name As String

    Private _Logo As System.Data.Linq.Binary

    Private _WebSite As String

    Private _Book As EntitySet(Of Book)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate()
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnLogoChanging(ByVal value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLogoChanged()
    End Sub
    Partial Private Sub OnWebSiteChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnWebSiteChanged()
    End Sub
#End Region

    Public Sub New()
      MyBase.New()
      OnCreated()
      Me._Book = New EntitySet(Of Book)(AddressOf Me.attach_Book, AddressOf Me.detach_Book)
    End Sub

    <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
    Public Property ID() As System.Guid
      Get
        Return Me._ID
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._ID = Value) _
           = False) Then
          Me.OnIDChanging(Value)
          Me.SendPropertyChanging()
          Me._ID = Value
          Me.SendPropertyChanged("ID")
          Me.OnIDChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property Name() As String
      Get
        Return Me._Name
      End Get
      Set(ByVal value As String)
        If ((Me._Name = Value) _
           = False) Then
          Me.OnNameChanging(Value)
          Me.SendPropertyChanging()
          Me._Name = Value
          Me.SendPropertyChanged("Name")
          Me.OnNameChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Logo", DbType:="Image", CanBeNull:=True, UpdateCheck:=UpdateCheck.Never)> _
    Public Property Logo() As System.Data.Linq.Binary
      Get
        Return Me._Logo
      End Get
      Set(ByVal value As System.Data.Linq.Binary)
        If (Me._Logo.Equals(Value) = False) Then
          Me.OnLogoChanging(Value)
          Me.SendPropertyChanging()
          Me._Logo = Value
          Me.SendPropertyChanged("Logo")
          Me.OnLogoChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_WebSite", DbType:="VarChar(200)")> _
    Public Property WebSite() As String
      Get
        Return Me._WebSite
      End Get
      Set(ByVal value As String)
        If ((Me._WebSite = Value) _
           = False) Then
          Me.OnWebSiteChanging(Value)
          Me.SendPropertyChanging()
          Me._WebSite = Value
          Me.SendPropertyChanged("WebSite")
          Me.OnWebSiteChanged()
        End If
      End Set
    End Property

    <Association(Name:="FK_Book_Publisher", Storage:="_Book", OtherKey:="Publisher", DeleteRule:="NO ACTION")> _
    Public Property Book() As EntitySet(Of Book)
      Get
        Return Me._Book
      End Get
      Set(ByVal value As EntitySet(Of Book))
        Me._Book.Assign(Value)
      End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
    End Sub

    Private Sub attach_Book(ByVal entity As Book)
      Me.SendPropertyChanging()
      entity.PublisherPublisher = Me
      Me.SendPropertyChanged("Book")
    End Sub

    Private Sub detach_Book(ByVal entity As Book)
      Me.SendPropertyChanging()
      entity.PublisherPublisher = Nothing
      Me.SendPropertyChanged("Book")
    End Sub
  End Class

  <Table(Name:="dbo.Review")> _
  Partial Public Class Review
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ID As System.Guid

    Private _Book As System.Guid

    Private _User As System.Guid

    Private _Rating As System.Nullable(Of Integer)

    Private _Comments As String

    Private _BookBook As EntityRef(Of Book)

    Private _UserUser As EntityRef(Of User)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate()
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnBookChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnBookChanged()
    End Sub
    Partial Private Sub OnUserChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnUserChanged()
    End Sub
    Partial Private Sub OnRatingChanging(ByVal value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRatingChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
#End Region

    Public Sub New()
      MyBase.New()
      OnCreated()
      Me._BookBook = CType(Nothing, EntityRef(Of Book))
      Me._UserUser = CType(Nothing, EntityRef(Of User))
    End Sub

    <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
    Public Property ID() As System.Guid
      Get
        Return Me._ID
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._ID = Value) _
           = False) Then
          Me.OnIDChanging(Value)
          Me.SendPropertyChanging()
          Me._ID = Value
          Me.SendPropertyChanged("ID")
          Me.OnIDChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Book", DbType:="UniqueIdentifier NOT NULL")> _
    Public Property Book() As System.Guid
      Get
        Return Me._Book
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._Book = Value) _
           = False) Then
          If Me._BookBook.HasLoadedOrAssignedValue Then
            Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
          End If
          Me.OnBookChanging(Value)
          Me.SendPropertyChanging()
          Me._Book = Value
          Me.SendPropertyChanged("Book")
          Me.OnBookChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_User", DbType:="UniqueIdentifier NOT NULL")> _
    Public Property User() As System.Guid
      Get
        Return Me._User
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._User = Value) _
           = False) Then
          If Me._UserUser.HasLoadedOrAssignedValue Then
            Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
          End If
          Me.OnUserChanging(Value)
          Me.SendPropertyChanging()
          Me._User = Value
          Me.SendPropertyChanged("User")
          Me.OnUserChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Rating", DbType:="Int")> _
    Public Property Rating() As System.Nullable(Of Integer)
      Get
        Return Me._Rating
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
        If (Me._Rating.Equals(Value) = False) Then
          Me.OnRatingChanging(Value)
          Me.SendPropertyChanging()
          Me._Rating = Value
          Me.SendPropertyChanged("Rating")
          Me.OnRatingChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Comments", DbType:="VarChar(2000)")> _
    Public Property Comments() As String
      Get
        Return Me._Comments
      End Get
      Set(ByVal value As String)
        If ((Me._Comments = Value) _
           = False) Then
          Me.OnCommentsChanging(Value)
          Me.SendPropertyChanging()
          Me._Comments = Value
          Me.SendPropertyChanged("Comments")
          Me.OnCommentsChanged()
        End If
      End Set
    End Property

    <Association(Name:="FK_Review_Book", Storage:="_BookBook", ThisKey:="Book", IsForeignKey:=True)> _
    Public Property BookBook() As Book
      Get
        Return Me._BookBook.Entity
      End Get
      Set(ByVal value As Book)
        Dim previousValue As Book = Me._BookBook.Entity
        If (((previousValue Is Value) _
           = False) _
           OrElse (Me._BookBook.HasLoadedOrAssignedValue = False)) Then
          Me.SendPropertyChanging()
          If ((previousValue Is Nothing) _
             = False) Then
            Me._BookBook.Entity = Nothing
            previousValue.Review.Remove(Me)
          End If
          Me._BookBook.Entity = Value
          If ((Value Is Nothing) _
             = False) Then
            Value.Review.Add(Me)
            Me._Book = Value.ID
          Else
            Me._Book = CType(Nothing, System.Guid)
          End If
          Me.SendPropertyChanged("BookBook")
        End If
      End Set
    End Property

    <Association(Name:="FK_Review_User", Storage:="_UserUser", ThisKey:="User", IsForeignKey:=True)> _
    Public Property UserUser() As User
      Get
        Return Me._UserUser.Entity
      End Get
      Set(ByVal value As User)
        Dim previousValue As User = Me._UserUser.Entity
        If (((previousValue Is Value) _
           = False) _
           OrElse (Me._UserUser.HasLoadedOrAssignedValue = False)) Then
          Me.SendPropertyChanging()
          If ((previousValue Is Nothing) _
             = False) Then
            Me._UserUser.Entity = Nothing
            previousValue.Review.Remove(Me)
          End If
          Me._UserUser.Entity = Value
          If ((Value Is Nothing) _
             = False) Then
            Value.Review.Add(Me)
            Me._User = Value.ID
          Else
            Me._User = CType(Nothing, System.Guid)
          End If
          Me.SendPropertyChanged("UserUser")
        End If
      End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
    End Sub
  End Class

  <Table(Name:="dbo.Subject")> _
  Partial Public Class Subject
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ID As System.Guid

    Private _Name As String

    Private _Description As String

    Private _Book As EntitySet(Of Book)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate()
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
#End Region

    Public Sub New()
      MyBase.New()
      OnCreated()
      Me._Book = New EntitySet(Of Book)(AddressOf Me.attach_Book, AddressOf Me.detach_Book)
    End Sub

    <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
    Public Property ID() As System.Guid
      Get
        Return Me._ID
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._ID = Value) _
           = False) Then
          Me.OnIDChanging(Value)
          Me.SendPropertyChanging()
          Me._ID = Value
          Me.SendPropertyChanged("ID")
          Me.OnIDChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=False)> _
    Public Property Name() As String
      Get
        Return Me._Name
      End Get
      Set(ByVal value As String)
        If ((Me._Name = Value) _
           = False) Then
          Me.OnNameChanging(Value)
          Me.SendPropertyChanging()
          Me._Name = Value
          Me.SendPropertyChanged("Name")
          Me.OnNameChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Description", DbType:="VarChar(200)")> _
    Public Property Description() As String
      Get
        Return Me._Description
      End Get
      Set(ByVal value As String)
        If ((Me._Description = Value) _
           = False) Then
          Me.OnDescriptionChanging(Value)
          Me.SendPropertyChanging()
          Me._Description = Value
          Me.SendPropertyChanged("Description")
          Me.OnDescriptionChanged()
        End If
      End Set
    End Property

    <Association(Name:="FK_Book_Subject", Storage:="_Book", OtherKey:="Subject", DeleteRule:="NO ACTION")> _
    Public Property Book() As EntitySet(Of Book)
      Get
        Return Me._Book
      End Get
      Set(ByVal value As EntitySet(Of Book))
        Me._Book.Assign(Value)
      End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
    End Sub

    Private Sub attach_Book(ByVal entity As Book)
      Me.SendPropertyChanging()
      entity.SubjectSubject = Me
      Me.SendPropertyChanged("Book")
    End Sub

    Private Sub detach_Book(ByVal entity As Book)
      Me.SendPropertyChanging()
      entity.SubjectSubject = Nothing
      Me.SendPropertyChanged("Book")
    End Sub
  End Class

  <Table(Name:="dbo.User")> _
  Partial Public Class User
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ID As System.Guid

    Private _Name As String

    Private _Review As EntitySet(Of Review)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate()
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
#End Region

    Public Sub New()
      MyBase.New()
      OnCreated()
      Me._Review = New EntitySet(Of Review)(AddressOf Me.attach_Review, AddressOf Me.detach_Review)
    End Sub

    <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
    Public Property ID() As System.Guid
      Get
        Return Me._ID
      End Get
      Set(ByVal value As System.Guid)
        If ((Me._ID = Value) _
           = False) Then
          Me.OnIDChanging(Value)
          Me.SendPropertyChanging()
          Me._ID = Value
          Me.SendPropertyChanged("ID")
          Me.OnIDChanged()
        End If
      End Set
    End Property

    <Column(Storage:="_Name", DbType:="VarChar(20) NOT NULL", CanBeNull:=False)> _
    Public Property Name() As String
      Get
        Return Me._Name
      End Get
      Set(ByVal value As String)
        If ((Me._Name = Value) _
           = False) Then
          Me.OnNameChanging(Value)
          Me.SendPropertyChanging()
          Me._Name = Value
          Me.SendPropertyChanged("Name")
          Me.OnNameChanged()
        End If
      End Set
    End Property

    <Association(Name:="FK_Review_User", Storage:="_Review", OtherKey:="User", DeleteRule:="NO ACTION")> _
    Public Property Review() As EntitySet(Of Review)
      Get
        Return Me._Review
      End Get
      Set(ByVal value As EntitySet(Of Review))
        Me._Review.Assign(Value)
      End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
    End Sub

    Private Sub attach_Review(ByVal entity As Review)
      Me.SendPropertyChanging()
      entity.UserUser = Me
      Me.SendPropertyChanged("Review")
    End Sub

    Private Sub detach_Review(ByVal entity As Review)
      Me.SendPropertyChanging()
      entity.UserUser = Nothing
      Me.SendPropertyChanged("Review")
    End Sub
  End Class
End Namespace
