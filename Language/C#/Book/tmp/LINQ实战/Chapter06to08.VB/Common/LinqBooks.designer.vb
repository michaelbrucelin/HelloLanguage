'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="lia")>  _
Partial Public Class LinqBooksDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAuthor(instance As Author)
    End Sub
  Partial Private Sub UpdateAuthor(instance As Author)
    End Sub
  Partial Private Sub DeleteAuthor(instance As Author)
    End Sub
  Partial Private Sub InsertUserBase(instance As UserBase)
    End Sub
  Partial Private Sub UpdateUserBase(instance As UserBase)
    End Sub
  Partial Private Sub DeleteUserBase(instance As UserBase)
    End Sub
  Partial Private Sub InsertBook(instance As Book)
    End Sub
  Partial Private Sub UpdateBook(instance As Book)
    End Sub
  Partial Private Sub DeleteBook(instance As Book)
    End Sub
  Partial Private Sub InsertBookAuthor(instance As BookAuthor)
    End Sub
  Partial Private Sub UpdateBookAuthor(instance As BookAuthor)
    End Sub
  Partial Private Sub DeleteBookAuthor(instance As BookAuthor)
    End Sub
  Partial Private Sub InsertPublisher(instance As Publisher)
    End Sub
  Partial Private Sub UpdatePublisher(instance As Publisher)
    End Sub
  Partial Private Sub DeletePublisher(instance As Publisher)
    End Sub
  Partial Private Sub InsertReview(instance As Review)
    End Sub
  Partial Private Sub UpdateReview(instance As Review)
    End Sub
  Partial Private Sub DeleteReview(instance As Review)
    End Sub
  Partial Private Sub InsertSubject(instance As Subject)
    End Sub
  Partial Private Sub UpdateSubject(instance As Subject)
    End Sub
  Partial Private Sub DeleteSubject(instance As Subject)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.LinqInAction.Chapter06to08.Common.My.MySettings.Default.liaConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Authors() As System.Data.Linq.Table(Of Author)
		Get
			Return Me.GetTable(Of Author)
		End Get
	End Property
	
	Public ReadOnly Property UserBases() As System.Data.Linq.Table(Of UserBase)
		Get
			Return Me.GetTable(Of UserBase)
		End Get
	End Property
	
	Public ReadOnly Property Books() As System.Data.Linq.Table(Of Book)
		Get
			Return Me.GetTable(Of Book)
		End Get
	End Property
	
	Public ReadOnly Property BookAuthors() As System.Data.Linq.Table(Of BookAuthor)
		Get
			Return Me.GetTable(Of BookAuthor)
		End Get
	End Property
	
	Public ReadOnly Property Publishers() As System.Data.Linq.Table(Of Publisher)
		Get
			Return Me.GetTable(Of Publisher)
		End Get
	End Property
	
	Public ReadOnly Property Reviews() As System.Data.Linq.Table(Of Review)
		Get
			Return Me.GetTable(Of Review)
		End Get
	End Property
	
	Public ReadOnly Property Subjects() As System.Data.Linq.Table(Of Subject)
		Get
			Return Me.GetTable(Of Subject)
		End Get
	End Property
	
	<FunctionAttribute(Name:="dbo.GetBook")>  _
	Public Function GetBook(<Parameter(Name:="BookId", DbType:="UniqueIdentifier")> ByVal bookId As System.Nullable(Of System.Guid), <Parameter(Name:="UserName", DbType:="NVarChar(50)")> ByVal userName As String) As ISingleResult(Of Book)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), bookId, userName)
		Return CType(result.ReturnValue,ISingleResult(Of Book))
	End Function
End Class

<Table(Name:="dbo.Author")>  _
Partial Public Class Author
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _LastName As String
	
	Private _FirstName As String
	
	Private _WebSite As String
	
	Private _TimeStamp() As Byte
	
	Private _BookAuthors As EntitySet(Of BookAuthor)
	
	Private _AuthorUser As EntityRef(Of AuthorUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnWebSiteChanging(value As String)
    End Sub
    Partial Private Sub OnWebSiteChanged()
    End Sub
    Partial Private Sub OnTimeStampChanging(value As Byte())
    End Sub
    Partial Private Sub OnTimeStampChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BookAuthors = New EntitySet(Of BookAuthor)(AddressOf Me.attach_BookAuthors, AddressOf Me.detach_BookAuthors)
		Me._AuthorUser = CType(Nothing, EntityRef(Of AuthorUser))
		OnCreated
	End Sub
	
	<Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				If Me._AuthorUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FirstName", DbType:="VarChar(30) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_WebSite", DbType:="VarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property WebSite() As String
		Get
			Return Me._WebSite
		End Get
		Set
			If (String.Equals(Me._WebSite, value) = false) Then
				Me.OnWebSiteChanging(value)
				Me.SendPropertyChanging
				Me._WebSite = value
				Me.SendPropertyChanged("WebSite")
				Me.OnWebSiteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TimeStamp", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TimeStamp() As Byte()
		Get
			Return Me._TimeStamp
		End Get
		Set
			If (Object.Equals(Me._TimeStamp, value) = false) Then
				Me.OnTimeStampChanging(value)
				Me.SendPropertyChanging
				Me._TimeStamp = value
				Me.SendPropertyChanged("TimeStamp")
				Me.OnTimeStampChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Author_BookAuthor", Storage:="_BookAuthors", OtherKey:="Author")>  _
	Public Property BookAuthors() As EntitySet(Of BookAuthor)
		Get
			Return Me._BookAuthors
		End Get
		Set
			Me._BookAuthors.Assign(value)
		End Set
	End Property
	
	<Association(Name:="AuthorUser_Author", Storage:="_AuthorUser", ThisKey:="ID", OtherKey:="Author", IsForeignKey:=true)>  _
	Public Property AuthorUser() As AuthorUser
		Get
			Return Me._AuthorUser.Entity
		End Get
		Set
			Dim previousValue As AuthorUser = Me._AuthorUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthorUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthorUser.Entity = Nothing
					previousValue.Authors.Remove(Me)
				End If
				Me._AuthorUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Authors.Add(Me)
					Me._ID = value.Author
				Else
					Me._ID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("AuthorUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BookAuthors(ByVal entity As BookAuthor)
		Me.SendPropertyChanging
		entity.Author1 = Me
	End Sub
	
	Private Sub detach_BookAuthors(ByVal entity As BookAuthor)
		Me.SendPropertyChanging
		entity.Author1 = Nothing
	End Sub
End Class

<Table(Name:="dbo.[User]"),  _
 InheritanceMapping(Code:="S", Type:=GetType(UserBase), IsDefault:=true),  _
 InheritanceMapping(Code:="P", Type:=GetType(PublisherUser)),  _
 InheritanceMapping(Code:="A", Type:=GetType(AuthorUser))>  _
Partial Public Class UserBase
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _Name As String
	
	Private _UserType As Char
	
	Private _Reviews As EntitySet(Of Review)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnUserTypeChanging(value As Char)
    End Sub
    Partial Private Sub OnUserTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Reviews = New EntitySet(Of Review)(AddressOf Me.attach_Reviews, AddressOf Me.detach_Reviews)
		OnCreated
	End Sub
	
	<Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserType", DbType:="NChar(1) NOT NULL", IsDiscriminator:=true)>  _
	Public Property UserType() As Char
		Get
			Return Me._UserType
		End Get
		Set
			If ((Me._UserType = value)  _
						= false) Then
				Me.OnUserTypeChanging(value)
				Me.SendPropertyChanging
				Me._UserType = value
				Me.SendPropertyChanged("UserType")
				Me.OnUserTypeChanged
			End If
		End Set
	End Property
	
	<Association(Name:="UserBase_Review", Storage:="_Reviews", OtherKey:="User")>  _
	Public Property Reviews() As EntitySet(Of Review)
		Get
			Return Me._Reviews
		End Get
		Set
			Me._Reviews.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Reviews(ByVal entity As Review)
		Me.SendPropertyChanging
		entity.User1 = Me
	End Sub
	
	Private Sub detach_Reviews(ByVal entity As Review)
		Me.SendPropertyChanging
		entity.User1 = Nothing
	End Sub
End Class

Partial Public Class PublisherUser
	Inherits UserBase
	
	Private _Publisher As System.Guid
	
	Private _Publishers As EntitySet(Of Publisher)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPublisherChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPublisherChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Publishers = New EntitySet(Of Publisher)(AddressOf Me.attach_Publishers, AddressOf Me.detach_Publishers)
		OnCreated
	End Sub
	
	<Column(Storage:="_Publisher")>  _
	Public Property Publisher() As System.Guid
		Get
			Return Me._Publisher
		End Get
		Set
			If ((Me._Publisher = value)  _
						= false) Then
				Me.OnPublisherChanging(value)
				Me.SendPropertyChanging
				Me._Publisher = value
				Me.SendPropertyChanged("Publisher")
				Me.OnPublisherChanged
			End If
		End Set
	End Property
	
	<Association(Name:="PublisherUser_Publisher", Storage:="_Publishers", ThisKey:="Publisher", OtherKey:="ID")>  _
	Public Property Publishers() As EntitySet(Of Publisher)
		Get
			Return Me._Publishers
		End Get
		Set
			Me._Publishers.Assign(value)
		End Set
	End Property
	
	Private Sub attach_Publishers(ByVal entity As Publisher)
		Me.SendPropertyChanging
		entity.PublisherUser = Me
	End Sub
	
	Private Sub detach_Publishers(ByVal entity As Publisher)
		Me.SendPropertyChanging
		entity.PublisherUser = Nothing
	End Sub
End Class

Partial Public Class AuthorUser
	Inherits UserBase
	
	Private _Author As System.Guid
	
	Private _Authors As EntitySet(Of Author)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAuthorChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAuthorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Authors = New EntitySet(Of Author)(AddressOf Me.attach_Authors, AddressOf Me.detach_Authors)
		OnCreated
	End Sub
	
	<Column(Storage:="_Author")>  _
	Public Property Author() As System.Guid
		Get
			Return Me._Author
		End Get
		Set
			If ((Me._Author = value)  _
						= false) Then
				Me.OnAuthorChanging(value)
				Me.SendPropertyChanging
				Me._Author = value
				Me.SendPropertyChanged("Author")
				Me.OnAuthorChanged
			End If
		End Set
	End Property
	
	<Association(Name:="AuthorUser_Author", Storage:="_Authors", ThisKey:="Author", OtherKey:="ID")>  _
	Public Property Authors() As EntitySet(Of Author)
		Get
			Return Me._Authors
		End Get
		Set
			Me._Authors.Assign(value)
		End Set
	End Property
	
	Private Sub attach_Authors(ByVal entity As Author)
		Me.SendPropertyChanging
		entity.AuthorUser = Me
	End Sub
	
	Private Sub detach_Authors(ByVal entity As Author)
		Me.SendPropertyChanging
		entity.AuthorUser = Nothing
	End Sub
End Class

<Table(Name:="dbo.Book")>  _
Partial Public Class Book
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _Isbn As String
	
	Private _Notes As String
	
	Private _PageCount As Integer
	
	Private _Price As System.Nullable(Of Decimal)
	
	Private _PubDate As System.Nullable(Of Date)
	
	Private _Publisher As System.Guid
	
	Private _Subject As System.Guid
	
	Private _Summary As String
	
	Private _Title As String
	
	Private _BookAuthors As EntitySet(Of BookAuthor)
	
	Private _Reviews As EntitySet(Of Review)
	
	Private _Publisher1 As EntityRef(Of Publisher)
	
	Private _Subject1 As EntityRef(Of Subject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnIsbnChanging(value As String)
    End Sub
    Partial Private Sub OnIsbnChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnPageCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageCountChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnPubDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPubDateChanged()
    End Sub
    Partial Private Sub OnPublisherIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPublisherIdChanged()
    End Sub
    Partial Private Sub OnSubjectIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubjectIdChanged()
    End Sub
    Partial Private Sub OnSummaryChanging(value As String)
    End Sub
    Partial Private Sub OnSummaryChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BookAuthors = New EntitySet(Of BookAuthor)(AddressOf Me.attach_BookAuthors, AddressOf Me.detach_BookAuthors)
		Me._Reviews = New EntitySet(Of Review)(AddressOf Me.attach_Reviews, AddressOf Me.detach_Reviews)
		Me._Publisher1 = CType(Nothing, EntityRef(Of Publisher))
		Me._Subject1 = CType(Nothing, EntityRef(Of Subject))
		OnCreated
	End Sub
	
	<Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Isbn", DbType:="NChar(13)")>  _
	Public Property Isbn() As String
		Get
			Return Me._Isbn
		End Get
		Set
			If (String.Equals(Me._Isbn, value) = false) Then
				Me.OnIsbnChanging(value)
				Me.SendPropertyChanging
				Me._Isbn = value
				Me.SendPropertyChanged("Isbn")
				Me.OnIsbnChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Notes", DbType:="VarChar(2000)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PageCount", DbType:="Int NOT NULL")>  _
	Public Property PageCount() As Integer
		Get
			Return Me._PageCount
		End Get
		Set
			If ((Me._PageCount = value)  _
						= false) Then
				Me.OnPageCountChanging(value)
				Me.SendPropertyChanging
				Me._PageCount = value
				Me.SendPropertyChanged("PageCount")
				Me.OnPageCountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Price", DbType:="Money")>  _
	Public Property Price() As System.Nullable(Of Decimal)
		Get
			Return Me._Price
		End Get
		Set
			If (Me._Price.Equals(value) = false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PubDate", DbType:="DateTime")>  _
	Public Property PubDate() As System.Nullable(Of Date)
		Get
			Return Me._PubDate
		End Get
		Set
			If (Me._PubDate.Equals(value) = false) Then
				Me.OnPubDateChanging(value)
				Me.SendPropertyChanging
				Me._PubDate = value
				Me.SendPropertyChanged("PubDate")
				Me.OnPubDateChanged
			End If
		End Set
	End Property
	
	<Column(Name:="Publisher", Storage:="_Publisher", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property PublisherId() As System.Guid
		Get
			Return Me._Publisher
		End Get
		Set
			If ((Me._Publisher = value)  _
						= false) Then
				Me.OnPublisherIdChanging(value)
				Me.SendPropertyChanging
				Me._Publisher = value
				Me.SendPropertyChanged("PublisherId")
				Me.OnPublisherIdChanged
			End If
		End Set
	End Property
	
	<Column(Name:="Subject", Storage:="_Subject", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property SubjectId() As System.Guid
		Get
			Return Me._Subject
		End Get
		Set
			If ((Me._Subject = value)  _
						= false) Then
				Me.OnSubjectIdChanging(value)
				Me.SendPropertyChanging
				Me._Subject = value
				Me.SendPropertyChanged("SubjectId")
				Me.OnSubjectIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Summary", DbType:="VarChar(2000)")>  _
	Public Property Summary() As String
		Get
			Return Me._Summary
		End Get
		Set
			If (String.Equals(Me._Summary, value) = false) Then
				Me.OnSummaryChanging(value)
				Me.SendPropertyChanging
				Me._Summary = value
				Me.SendPropertyChanged("Summary")
				Me.OnSummaryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Book_BookAuthor", Storage:="_BookAuthors", OtherKey:="Book")>  _
	Public Property BookAuthors() As EntitySet(Of BookAuthor)
		Get
			Return Me._BookAuthors
		End Get
		Set
			Me._BookAuthors.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Book_Review", Storage:="_Reviews", OtherKey:="Book")>  _
	Public Property Reviews() As EntitySet(Of Review)
		Get
			Return Me._Reviews
		End Get
		Set
			Me._Reviews.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Publisher_Book", Storage:="_Publisher1", ThisKey:="PublisherId", IsForeignKey:=true)>  _
	Public Property Publisher1() As Publisher
		Get
			Return Me._Publisher1.Entity
		End Get
		Set
			Dim previousValue As Publisher = Me._Publisher1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Publisher1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Publisher1.Entity = Nothing
					previousValue.Books.Remove(Me)
				End If
				Me._Publisher1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Books.Add(Me)
					Me._Publisher = value.ID
				Else
					Me._Publisher = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Publisher1")
			End If
		End Set
	End Property
	
	<Association(Name:="Subject_Book", Storage:="_Subject1", ThisKey:="SubjectId", OtherKey:="SubjectId", IsForeignKey:=true)>  _
	Public Property Subject1() As Subject
		Get
			Return Me._Subject1.Entity
		End Get
		Set
			Dim previousValue As Subject = Me._Subject1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Subject1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Subject1.Entity = Nothing
					previousValue.Books.Remove(Me)
				End If
				Me._Subject1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Books.Add(Me)
					Me._Subject = value.SubjectId
				Else
					Me._Subject = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Subject1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BookAuthors(ByVal entity As BookAuthor)
		Me.SendPropertyChanging
		entity.Book1 = Me
	End Sub
	
	Private Sub detach_BookAuthors(ByVal entity As BookAuthor)
		Me.SendPropertyChanging
		entity.Book1 = Nothing
	End Sub
	
	Private Sub attach_Reviews(ByVal entity As Review)
		Me.SendPropertyChanging
		entity.Book1 = Me
	End Sub
	
	Private Sub detach_Reviews(ByVal entity As Review)
		Me.SendPropertyChanging
		entity.Book1 = Nothing
	End Sub
End Class

<Table(Name:="dbo.BookAuthor")>  _
Partial Public Class BookAuthor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Author As System.Guid
	
	Private _Book As System.Guid
	
	Private _AuthorOrder As System.Nullable(Of Integer)
	
	Private _Author1 As EntityRef(Of Author)
	
	Private _Book1 As EntityRef(Of Book)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAuthorChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAuthorChanged()
    End Sub
    Partial Private Sub OnBookChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnBookChanged()
    End Sub
    Partial Private Sub OnAuthorOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAuthorOrderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Author1 = CType(Nothing, EntityRef(Of Author))
		Me._Book1 = CType(Nothing, EntityRef(Of Book))
		OnCreated
	End Sub
	
	<Column(Storage:="_Author", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Author() As System.Guid
		Get
			Return Me._Author
		End Get
		Set
			If ((Me._Author = value)  _
						= false) Then
				If Me._Author1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnAuthorChanging(value)
				Me.SendPropertyChanging
				Me._Author = value
				Me.SendPropertyChanged("Author")
				Me.OnAuthorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Book", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Book() As System.Guid
		Get
			Return Me._Book
		End Get
		Set
			If ((Me._Book = value)  _
						= false) Then
				If Me._Book1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnBookChanging(value)
				Me.SendPropertyChanging
				Me._Book = value
				Me.SendPropertyChanged("Book")
				Me.OnBookChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AuthorOrder", DbType:="Int")>  _
	Public Property AuthorOrder() As System.Nullable(Of Integer)
		Get
			Return Me._AuthorOrder
		End Get
		Set
			If (Me._AuthorOrder.Equals(value) = false) Then
				Me.OnAuthorOrderChanging(value)
				Me.SendPropertyChanging
				Me._AuthorOrder = value
				Me.SendPropertyChanged("AuthorOrder")
				Me.OnAuthorOrderChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Author_BookAuthor", Storage:="_Author1", ThisKey:="Author", IsForeignKey:=true)>  _
	Public Property Author1() As Author
		Get
			Return Me._Author1.Entity
		End Get
		Set
			Dim previousValue As Author = Me._Author1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Author1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Author1.Entity = Nothing
					previousValue.BookAuthors.Remove(Me)
				End If
				Me._Author1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BookAuthors.Add(Me)
					Me._Author = value.ID
				Else
					Me._Author = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Author1")
			End If
		End Set
	End Property
	
	<Association(Name:="Book_BookAuthor", Storage:="_Book1", ThisKey:="Book", IsForeignKey:=true)>  _
	Public Property Book1() As Book
		Get
			Return Me._Book1.Entity
		End Get
		Set
			Dim previousValue As Book = Me._Book1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Book1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Book1.Entity = Nothing
					previousValue.BookAuthors.Remove(Me)
				End If
				Me._Book1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BookAuthors.Add(Me)
					Me._Book = value.ID
				Else
					Me._Book = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Book1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Publisher")>  _
Partial Public Class Publisher
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _Name As String
	
	Private _Logo() As Byte
	
	Private _WebSite As String
	
	Private _Books As EntitySet(Of Book)
	
	Private _PublisherUser As EntityRef(Of PublisherUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnLogoChanging(value As Byte())
    End Sub
    Partial Private Sub OnLogoChanged()
    End Sub
    Partial Private Sub OnWebSiteChanging(value As String)
    End Sub
    Partial Private Sub OnWebSiteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Books = New EntitySet(Of Book)(AddressOf Me.attach_Books, AddressOf Me.detach_Books)
		Me._PublisherUser = CType(Nothing, EntityRef(Of PublisherUser))
		OnCreated
	End Sub
	
	<Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				If Me._PublisherUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Logo", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Logo() As Byte()
		Get
			Return Me._Logo
		End Get
		Set
			If (Object.Equals(Me._Logo, value) = false) Then
				Me.OnLogoChanging(value)
				Me.SendPropertyChanging
				Me._Logo = value
				Me.SendPropertyChanged("Logo")
				Me.OnLogoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_WebSite", DbType:="VarChar(200)")>  _
	Public Property WebSite() As String
		Get
			Return Me._WebSite
		End Get
		Set
			If (String.Equals(Me._WebSite, value) = false) Then
				Me.OnWebSiteChanging(value)
				Me.SendPropertyChanging
				Me._WebSite = value
				Me.SendPropertyChanged("WebSite")
				Me.OnWebSiteChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Publisher_Book", Storage:="_Books", OtherKey:="PublisherId")>  _
	Public Property Books() As EntitySet(Of Book)
		Get
			Return Me._Books
		End Get
		Set
			Me._Books.Assign(value)
		End Set
	End Property
	
	<Association(Name:="PublisherUser_Publisher", Storage:="_PublisherUser", ThisKey:="ID", OtherKey:="Publisher", IsForeignKey:=true)>  _
	Public Property PublisherUser() As PublisherUser
		Get
			Return Me._PublisherUser.Entity
		End Get
		Set
			Dim previousValue As PublisherUser = Me._PublisherUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PublisherUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PublisherUser.Entity = Nothing
					previousValue.Publishers.Remove(Me)
				End If
				Me._PublisherUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Publishers.Add(Me)
					Me._ID = value.Publisher
				Else
					Me._ID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("PublisherUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Books(ByVal entity As Book)
		Me.SendPropertyChanging
		entity.Publisher1 = Me
	End Sub
	
	Private Sub detach_Books(ByVal entity As Book)
		Me.SendPropertyChanging
		entity.Publisher1 = Nothing
	End Sub
End Class

<Table(Name:="dbo.Review")>  _
Partial Public Class Review
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _Book As System.Guid
	
	Private _User As System.Guid
	
	Private _Rating As System.Nullable(Of Integer)
	
	Private _Comments As String
	
	Private _Book1 As EntityRef(Of Book)
	
	Private _User1 As EntityRef(Of UserBase)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnBookChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnBookChanged()
    End Sub
    Partial Private Sub OnUserChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserChanged()
    End Sub
    Partial Private Sub OnRatingChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRatingChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Book1 = CType(Nothing, EntityRef(Of Book))
		Me._User1 = CType(Nothing, EntityRef(Of UserBase))
		OnCreated
	End Sub
	
	<Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Book", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Book() As System.Guid
		Get
			Return Me._Book
		End Get
		Set
			If ((Me._Book = value)  _
						= false) Then
				If Me._Book1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnBookChanging(value)
				Me.SendPropertyChanging
				Me._Book = value
				Me.SendPropertyChanged("Book")
				Me.OnBookChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[User]", Storage:="_User", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property User() As System.Guid
		Get
			Return Me._User
		End Get
		Set
			If ((Me._User = value)  _
						= false) Then
				Me.OnUserChanging(value)
				Me.SendPropertyChanging
				Me._User = value
				Me.SendPropertyChanged("User")
				Me.OnUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Rating", DbType:="Int")>  _
	Public Property Rating() As System.Nullable(Of Integer)
		Get
			Return Me._Rating
		End Get
		Set
			If (Me._Rating.Equals(value) = false) Then
				Me.OnRatingChanging(value)
				Me.SendPropertyChanging
				Me._Rating = value
				Me.SendPropertyChanged("Rating")
				Me.OnRatingChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comments", DbType:="VarChar(2000)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Book_Review", Storage:="_Book1", ThisKey:="Book", IsForeignKey:=true)>  _
	Public Property Book1() As Book
		Get
			Return Me._Book1.Entity
		End Get
		Set
			Dim previousValue As Book = Me._Book1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Book1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Book1.Entity = Nothing
					previousValue.Reviews.Remove(Me)
				End If
				Me._Book1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Reviews.Add(Me)
					Me._Book = value.ID
				Else
					Me._Book = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Book1")
			End If
		End Set
	End Property
	
	<Association(Name:="UserBase_Review", Storage:="_User1", ThisKey:="User", IsForeignKey:=true)>  _
	Public Property User1() As UserBase
		Get
			Return Me._User1.Entity
		End Get
		Set
			Dim previousValue As UserBase = Me._User1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User1.Entity = Nothing
					previousValue.Reviews.Remove(Me)
				End If
				Me._User1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Reviews.Add(Me)
					Me._User = value.ID
				Else
					Me._User = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("User1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Subject")>  _
Partial Public Class Subject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Books As EntitySet(Of Book)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSubjectIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubjectIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Books = New EntitySet(Of Book)(AddressOf Me.attach_Books, AddressOf Me.detach_Books)
		OnCreated
	End Sub
	
	<Column(Name:="ID", Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SubjectId() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnSubjectIdChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("SubjectId")
				Me.OnSubjectIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(200)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Subject_Book", Storage:="_Books", ThisKey:="SubjectId", OtherKey:="SubjectId")>  _
	Public Property Books() As EntitySet(Of Book)
		Get
			Return Me._Books
		End Get
		Set
			Me._Books.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Books(ByVal entity As Book)
		Me.SendPropertyChanging
		entity.Subject1 = Me
	End Sub
	
	Private Sub detach_Books(ByVal entity As Book)
		Me.SendPropertyChanging
		entity.Subject1 = Nothing
	End Sub
End Class
