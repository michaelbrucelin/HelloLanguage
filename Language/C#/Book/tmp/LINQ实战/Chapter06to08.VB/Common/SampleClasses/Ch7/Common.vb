'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1378
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace SampleClasses.Ch7.SqlMetal

    <System.Data.Linq.Mapping.DatabaseAttribute(Name:="lia")> _
    Partial Public Class Lia
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource

#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub InsertAuthor(ByVal instance As Author)
        End Sub
        Partial Private Sub UpdateAuthor(ByVal instance As Author)
        End Sub
        Partial Private Sub DeleteAuthor(ByVal instance As Author)
        End Sub
        Partial Private Sub InsertBook(ByVal instance As Book)
        End Sub
        Partial Private Sub UpdateBook(ByVal instance As Book)
        End Sub
        Partial Private Sub DeleteBook(ByVal instance As Book)
        End Sub
        Partial Private Sub InsertBookAuthor(ByVal instance As BookAuthor)
        End Sub
        Partial Private Sub UpdateBookAuthor(ByVal instance As BookAuthor)
        End Sub
        Partial Private Sub DeleteBookAuthor(ByVal instance As BookAuthor)
        End Sub
        Partial Private Sub InsertPublisher(ByVal instance As Publisher)
        End Sub
        Partial Private Sub UpdatePublisher(ByVal instance As Publisher)
        End Sub
        Partial Private Sub DeletePublisher(ByVal instance As Publisher)
        End Sub
        Partial Private Sub InsertReview(ByVal instance As Review)
        End Sub
        Partial Private Sub UpdateReview(ByVal instance As Review)
        End Sub
        Partial Private Sub DeleteReview(ByVal instance As Review)
        End Sub
        Partial Private Sub InsertSubject(ByVal instance As Subject)
        End Sub
        Partial Private Sub UpdateSubject(ByVal instance As Subject)
        End Sub
        Partial Private Sub DeleteSubject(ByVal instance As Subject)
        End Sub
        Partial Private Sub InsertUser(ByVal instance As User)
        End Sub
        Partial Private Sub UpdateUser(ByVal instance As User)
        End Sub
        Partial Private Sub DeleteUser(ByVal instance As User)
        End Sub
#End Region

        Shared Sub New()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property Address() As System.Data.Linq.Table(Of Address)
            Get
                Return Me.GetTable(Of Address)()
            End Get
        End Property

        Public ReadOnly Property AuditTracking() As System.Data.Linq.Table(Of AuditTracking)
            Get
                Return Me.GetTable(Of AuditTracking)()
            End Get
        End Property

        Public ReadOnly Property Author() As System.Data.Linq.Table(Of Author)
            Get
                Return Me.GetTable(Of Author)()
            End Get
        End Property

        Public ReadOnly Property Book() As System.Data.Linq.Table(Of Book)
            Get
                Return Me.GetTable(Of Book)()
            End Get
        End Property

        Public ReadOnly Property BookAuthor() As System.Data.Linq.Table(Of BookAuthor)
            Get
                Return Me.GetTable(Of BookAuthor)()
            End Get
        End Property

        Public ReadOnly Property Publisher() As System.Data.Linq.Table(Of Publisher)
            Get
                Return Me.GetTable(Of Publisher)()
            End Get
        End Property

        Public ReadOnly Property Review() As System.Data.Linq.Table(Of Review)
            Get
                Return Me.GetTable(Of Review)()
            End Get
        End Property

        Public ReadOnly Property Subject() As System.Data.Linq.Table(Of Subject)
            Get
                Return Me.GetTable(Of Subject)()
            End Get
        End Property

        Public ReadOnly Property User() As System.Data.Linq.Table(Of User)
            Get
                Return Me.GetTable(Of User)()
            End Get
        End Property
    End Class

    <Table(Name:="dbo.Address")> _
    Partial Public Class Address

        Private _AddressId As System.Guid

        Private _Street1 As String

        Private _Street2 As String

        Private _City As String

        Private _Region As String

        Private _Country As String

        Private _PostalCode As String

        Public Sub New()
            MyBase.New()
        End Sub

        <Column(Storage:="_AddressId", DbType:="UniqueIdentifier NOT NULL")> _
        Public Property AddressId() As System.Guid
            Get
                Return Me._AddressId
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._AddressId = value) _
                   = False) Then
                    Me._AddressId = value
                End If
            End Set
        End Property

        <Column(Storage:="_Street1", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property Street1() As String
            Get
                Return Me._Street1
            End Get
            Set(ByVal value As String)
                If ((Me._Street1 = value) _
                   = False) Then
                    Me._Street1 = value
                End If
            End Set
        End Property

        <Column(Storage:="_Street2", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property Street2() As String
            Get
                Return Me._Street2
            End Get
            Set(ByVal value As String)
                If ((Me._Street2 = value) _
                   = False) Then
                    Me._Street2 = value
                End If
            End Set
        End Property

        <Column(Storage:="_City", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property City() As String
            Get
                Return Me._City
            End Get
            Set(ByVal value As String)
                If ((Me._City = value) _
                   = False) Then
                    Me._City = value
                End If
            End Set
        End Property

        <Column(Storage:="_Region", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property Region() As String
            Get
                Return Me._Region
            End Get
            Set(ByVal value As String)
                If ((Me._Region = value) _
                   = False) Then
                    Me._Region = value
                End If
            End Set
        End Property

        <Column(Storage:="_Country", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property Country() As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)
                If ((Me._Country = value) _
                   = False) Then
                    Me._Country = value
                End If
            End Set
        End Property

        <Column(Storage:="_PostalCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property PostalCode() As String
            Get
                Return Me._PostalCode
            End Get
            Set(ByVal value As String)
                If ((Me._PostalCode = value) _
                   = False) Then
                    Me._PostalCode = value
                End If
            End Set
        End Property
    End Class

    <Table(Name:="dbo.AuditTracking")> _
    Partial Public Class AuditTracking

        Private _ID As Integer

        Private _TableName As String

        Private _UserName As String

        Private _AccessDate As Date

        Public Sub New()
            MyBase.New()
        End Sub

        <Column(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=True)> _
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ID = value) _
                   = False) Then
                    Me._ID = value
                End If
            End Set
        End Property

        <Column(Storage:="_TableName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property TableName() As String
            Get
                Return Me._TableName
            End Get
            Set(ByVal value As String)
                If ((Me._TableName = value) _
                   = False) Then
                    Me._TableName = value
                End If
            End Set
        End Property

        <Column(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property UserName() As String
            Get
                Return Me._UserName
            End Get
            Set(ByVal value As String)
                If ((Me._UserName = value) _
                   = False) Then
                    Me._UserName = value
                End If
            End Set
        End Property

        <Column(Storage:="_AccessDate", DbType:="DateTime NOT NULL")> _
        Public Property AccessDate() As Date
            Get
                Return Me._AccessDate
            End Get
            Set(ByVal value As Date)
                If ((Me._AccessDate = value) _
                   = False) Then
                    Me._AccessDate = value
                End If
            End Set
        End Property
    End Class

    <Table(Name:="dbo.Author")> _
    Partial Public Class Author
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As System.Guid

        Private _LastName As String

        Private _FirstName As String

        Private _WebSite As String

        Private _TimeStamp As System.Data.Linq.Binary

        Private _BookAuthor As EntitySet(Of BookAuthor)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnLastNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnLastNameChanged()
        End Sub
        Partial Private Sub OnFirstNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFirstNameChanged()
        End Sub
        Partial Private Sub OnWebSiteChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnWebSiteChanged()
        End Sub
        Partial Private Sub OnTimeStampChanging(ByVal value As System.Data.Linq.Binary)
        End Sub
        Partial Private Sub OnTimeStampChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._BookAuthor = New EntitySet(Of BookAuthor)(AddressOf Me.attach_BookAuthor, AddressOf Me.detach_BookAuthor)
        End Sub

        <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True, UpdateCheck:=UpdateCheck.Never)> _
        Public Property ID() As System.Guid
            Get
                Return Me._ID
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._ID = value) _
                   = False) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=False, UpdateCheck:=UpdateCheck.Never)> _
        Public Property LastName() As String
            Get
                Return Me._LastName
            End Get
            Set(ByVal value As String)
                If ((Me._LastName = value) _
                   = False) Then
                    Me.OnLastNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._LastName = value
                    Me.SendPropertyChanged("LastName")
                    Me.OnLastNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_FirstName", DbType:="VarChar(30) NOT NULL", CanBeNull:=False, UpdateCheck:=UpdateCheck.Never)> _
        Public Property FirstName() As String
            Get
                Return Me._FirstName
            End Get
            Set(ByVal value As String)
                If ((Me._FirstName = value) _
                   = False) Then
                    Me.OnFirstNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._FirstName = value
                    Me.SendPropertyChanged("FirstName")
                    Me.OnFirstNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_WebSite", DbType:="VarChar(200)", UpdateCheck:=UpdateCheck.Never)> _
        Public Property WebSite() As String
            Get
                Return Me._WebSite
            End Get
            Set(ByVal value As String)
                If ((Me._WebSite = value) _
                   = False) Then
                    Me.OnWebSiteChanging(value)
                    Me.SendPropertyChanging()
                    Me._WebSite = value
                    Me.SendPropertyChanged("WebSite")
                    Me.OnWebSiteChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_TimeStamp", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=False, IsDbGenerated:=True, IsVersion:=True, UpdateCheck:=UpdateCheck.Never)> _
        Public Property TimeStamp() As System.Data.Linq.Binary
            Get
                Return Me._TimeStamp
            End Get
            Set(ByVal value As System.Data.Linq.Binary)
                If (Me._TimeStamp.Equals(value) = False) Then
                    Me.OnTimeStampChanging(value)
                    Me.SendPropertyChanging()
                    Me._TimeStamp = value
                    Me.SendPropertyChanged("TimeStamp")
                    Me.OnTimeStampChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_BookAuthor_Author", Storage:="_BookAuthor", OtherKey:="Author", DeleteRule:="NO ACTION")> _
        Public Property BookAuthor() As EntitySet(Of BookAuthor)
            Get
                Return Me._BookAuthor
            End Get
            Set(ByVal value As EntitySet(Of BookAuthor))
                Me._BookAuthor.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_BookAuthor(ByVal entity As BookAuthor)
            Me.SendPropertyChanging()
            entity.AuthorAuthor = Me
            Me.SendPropertyChanged("BookAuthor")
        End Sub

        Private Sub detach_BookAuthor(ByVal entity As BookAuthor)
            Me.SendPropertyChanging()
            entity.AuthorAuthor = Nothing
            Me.SendPropertyChanged("BookAuthor")
        End Sub
    End Class

    <Table(Name:="dbo.Book")> _
    Partial Public Class Book
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As System.Guid

        Private _Isbn As String

        Private _Notes As String

        Private _PageCount As Integer

        Private _Price As System.Nullable(Of Decimal)

        Private _PubDate As System.Nullable(Of Date)

        Private _Publisher As System.Guid

        Private _Subject As System.Guid

        Private _Summary As String

        Private _Title As String

        Private _PublisherPublisher As EntityRef(Of Publisher)

        Private _SubjectSubject As EntityRef(Of Subject)

        Private _BookAuthor As EntitySet(Of BookAuthor)

        Private _Review As EntitySet(Of Review)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnIsbnChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnIsbnChanged()
        End Sub
        Partial Private Sub OnNotesChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnNotesChanged()
        End Sub
        Partial Private Sub OnPageCountChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnPageCountChanged()
        End Sub
        Partial Private Sub OnPriceChanging(ByVal value As System.Nullable(Of Decimal))
        End Sub
        Partial Private Sub OnPriceChanged()
        End Sub
        Partial Private Sub OnPubDateChanging(ByVal value As System.Nullable(Of Date))
        End Sub
        Partial Private Sub OnPubDateChanged()
        End Sub
        Partial Private Sub OnPublisherChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnPublisherChanged()
        End Sub
        Partial Private Sub OnSubjectChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnSubjectChanged()
        End Sub
        Partial Private Sub OnSummaryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnSummaryChanged()
        End Sub
        Partial Private Sub OnTitleChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTitleChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._PublisherPublisher = CType(Nothing, EntityRef(Of Publisher))
            Me._SubjectSubject = CType(Nothing, EntityRef(Of Subject))
            Me._BookAuthor = New EntitySet(Of BookAuthor)(AddressOf Me.attach_BookAuthor, AddressOf Me.detach_BookAuthor)
            Me._Review = New EntitySet(Of Review)(AddressOf Me.attach_Review, AddressOf Me.detach_Review)
        End Sub

        <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
        Public Property ID() As System.Guid
            Get
                Return Me._ID
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._ID = value) _
                   = False) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Isbn", DbType:="NChar(13)")> _
        Public Property Isbn() As String
            Get
                Return Me._Isbn
            End Get
            Set(ByVal value As String)
                If ((Me._Isbn = value) _
                   = False) Then
                    Me.OnIsbnChanging(value)
                    Me.SendPropertyChanging()
                    Me._Isbn = value
                    Me.SendPropertyChanged("Isbn")
                    Me.OnIsbnChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Notes", DbType:="VarChar(2000)")> _
        Public Property Notes() As String
            Get
                Return Me._Notes
            End Get
            Set(ByVal value As String)
                If ((Me._Notes = value) _
                   = False) Then
                    Me.OnNotesChanging(value)
                    Me.SendPropertyChanging()
                    Me._Notes = value
                    Me.SendPropertyChanged("Notes")
                    Me.OnNotesChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PageCount", DbType:="Int NOT NULL")> _
        Public Property PageCount() As Integer
            Get
                Return Me._PageCount
            End Get
            Set(ByVal value As Integer)
                If ((Me._PageCount = value) _
                   = False) Then
                    Me.OnPageCountChanging(value)
                    Me.SendPropertyChanging()
                    Me._PageCount = value
                    Me.SendPropertyChanged("PageCount")
                    Me.OnPageCountChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Price", DbType:="Money")> _
        Public Property Price() As System.Nullable(Of Decimal)
            Get
                Return Me._Price
            End Get
            Set(ByVal value As System.Nullable(Of Decimal))
                If (Me._Price.Equals(value) = False) Then
                    Me.OnPriceChanging(value)
                    Me.SendPropertyChanging()
                    Me._Price = value
                    Me.SendPropertyChanged("Price")
                    Me.OnPriceChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PubDate", DbType:="DateTime")> _
        Public Property PubDate() As System.Nullable(Of Date)
            Get
                Return Me._PubDate
            End Get
            Set(ByVal value As System.Nullable(Of Date))
                If (Me._PubDate.Equals(value) = False) Then
                    Me.OnPubDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._PubDate = value
                    Me.SendPropertyChanged("PubDate")
                    Me.OnPubDateChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Publisher", DbType:="UniqueIdentifier NOT NULL")> _
        Public Property Publisher() As System.Guid
            Get
                Return Me._Publisher
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._Publisher = value) _
                   = False) Then
                    If Me._PublisherPublisher.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnPublisherChanging(value)
                    Me.SendPropertyChanging()
                    Me._Publisher = value
                    Me.SendPropertyChanged("Publisher")
                    Me.OnPublisherChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Subject", DbType:="UniqueIdentifier NOT NULL")> _
        Public Property Subject() As System.Guid
            Get
                Return Me._Subject
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._Subject = value) _
                   = False) Then
                    If Me._SubjectSubject.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnSubjectChanging(value)
                    Me.SendPropertyChanging()
                    Me._Subject = value
                    Me.SendPropertyChanged("Subject")
                    Me.OnSubjectChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Summary", DbType:="VarChar(2000)")> _
        Public Property Summary() As String
            Get
                Return Me._Summary
            End Get
            Set(ByVal value As String)
                If ((Me._Summary = value) _
                   = False) Then
                    Me.OnSummaryChanging(value)
                    Me.SendPropertyChanging()
                    Me._Summary = value
                    Me.SendPropertyChanged("Summary")
                    Me.OnSummaryChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Title", DbType:="VarChar(100) NOT NULL", CanBeNull:=False)> _
        Public Property Title() As String
            Get
                Return Me._Title
            End Get
            Set(ByVal value As String)
                If ((Me._Title = value) _
                   = False) Then
                    Me.OnTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._Title = value
                    Me.SendPropertyChanged("Title")
                    Me.OnTitleChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Book_Publisher", Storage:="_PublisherPublisher", ThisKey:="Publisher", IsForeignKey:=True)> _
        Public Property PublisherPublisher() As Publisher
            Get
                Return Me._PublisherPublisher.Entity
            End Get
            Set(ByVal value As Publisher)
                Dim previousValue As Publisher = Me._PublisherPublisher.Entity
                If (((previousValue Is value) _
                   = False) _
                   OrElse (Me._PublisherPublisher.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._PublisherPublisher.Entity = Nothing
                        previousValue.Book.Remove(Me)
                    End If
                    Me._PublisherPublisher.Entity = value
                    If ((value Is Nothing) _
                       = False) Then
                        value.Book.Add(Me)
                        Me._Publisher = value.ID
                    Else
                        Me._Publisher = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("PublisherPublisher")
                End If
            End Set
        End Property

        <Association(Name:="FK_Book_Subject", Storage:="_SubjectSubject", ThisKey:="Subject", IsForeignKey:=True)> _
        Public Property SubjectSubject() As Subject
            Get
                Return Me._SubjectSubject.Entity
            End Get
            Set(ByVal value As Subject)
                Dim previousValue As Subject = Me._SubjectSubject.Entity
                If (((previousValue Is value) _
                   = False) _
                   OrElse (Me._SubjectSubject.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._SubjectSubject.Entity = Nothing
                        previousValue.Book.Remove(Me)
                    End If
                    Me._SubjectSubject.Entity = value
                    If ((value Is Nothing) _
                       = False) Then
                        value.Book.Add(Me)
                        Me._Subject = value.ID
                    Else
                        Me._Subject = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("SubjectSubject")
                End If
            End Set
        End Property

        <Association(Name:="FK_BookAuthor_Book", Storage:="_BookAuthor", OtherKey:="Book", DeleteRule:="NO ACTION")> _
        Public Property BookAuthor() As EntitySet(Of BookAuthor)
            Get
                Return Me._BookAuthor
            End Get
            Set(ByVal value As EntitySet(Of BookAuthor))
                Me._BookAuthor.Assign(value)
            End Set
        End Property

        <Association(Name:="FK_Review_Book", Storage:="_Review", OtherKey:="Book", DeleteRule:="NO ACTION")> _
        Public Property Review() As EntitySet(Of Review)
            Get
                Return Me._Review
            End Get
            Set(ByVal value As EntitySet(Of Review))
                Me._Review.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_BookAuthor(ByVal entity As BookAuthor)
            Me.SendPropertyChanging()
            entity.BookBook = Me
            Me.SendPropertyChanged("BookAuthor")
        End Sub

        Private Sub detach_BookAuthor(ByVal entity As BookAuthor)
            Me.SendPropertyChanging()
            entity.BookBook = Nothing
            Me.SendPropertyChanged("BookAuthor")
        End Sub

        Private Sub attach_Review(ByVal entity As Review)
            Me.SendPropertyChanging()
            entity.BookBook = Me
            Me.SendPropertyChanged("Review")
        End Sub

        Private Sub detach_Review(ByVal entity As Review)
            Me.SendPropertyChanging()
            entity.BookBook = Nothing
            Me.SendPropertyChanged("Review")
        End Sub
    End Class

    <Table(Name:="dbo.BookAuthor")> _
    Partial Public Class BookAuthor
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _Author As System.Guid

        Private _Book As System.Guid

        Private _AuthorOrder As System.Nullable(Of Integer)

        Private _AuthorAuthor As EntityRef(Of Author)

        Private _BookBook As EntityRef(Of Book)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnAuthorChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnAuthorChanged()
        End Sub
        Partial Private Sub OnBookChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnBookChanged()
        End Sub
        Partial Private Sub OnAuthorOrderChanging(ByVal value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnAuthorOrderChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._AuthorAuthor = CType(Nothing, EntityRef(Of Author))
            Me._BookBook = CType(Nothing, EntityRef(Of Book))
        End Sub

        <Column(Storage:="_Author", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
        Public Property Author() As System.Guid
            Get
                Return Me._Author
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._Author = value) _
                   = False) Then
                    If Me._AuthorAuthor.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnAuthorChanging(value)
                    Me.SendPropertyChanging()
                    Me._Author = value
                    Me.SendPropertyChanged("Author")
                    Me.OnAuthorChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Book", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
        Public Property Book() As System.Guid
            Get
                Return Me._Book
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._Book = value) _
                   = False) Then
                    If Me._BookBook.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnBookChanging(value)
                    Me.SendPropertyChanging()
                    Me._Book = value
                    Me.SendPropertyChanged("Book")
                    Me.OnBookChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_AuthorOrder", DbType:="Int")> _
        Public Property AuthorOrder() As System.Nullable(Of Integer)
            Get
                Return Me._AuthorOrder
            End Get
            Set(ByVal value As System.Nullable(Of Integer))
                If (Me._AuthorOrder.Equals(value) = False) Then
                    Me.OnAuthorOrderChanging(value)
                    Me.SendPropertyChanging()
                    Me._AuthorOrder = value
                    Me.SendPropertyChanged("AuthorOrder")
                    Me.OnAuthorOrderChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_BookAuthor_Author", Storage:="_AuthorAuthor", ThisKey:="Author", IsForeignKey:=True)> _
        Public Property AuthorAuthor() As Author
            Get
                Return Me._AuthorAuthor.Entity
            End Get
            Set(ByVal value As Author)
                Dim previousValue As Author = Me._AuthorAuthor.Entity
                If (((previousValue Is value) _
                   = False) _
                   OrElse (Me._AuthorAuthor.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._AuthorAuthor.Entity = Nothing
                        previousValue.BookAuthor.Remove(Me)
                    End If
                    Me._AuthorAuthor.Entity = value
                    If ((value Is Nothing) _
                       = False) Then
                        value.BookAuthor.Add(Me)
                        Me._Author = value.ID
                    Else
                        Me._Author = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("AuthorAuthor")
                End If
            End Set
        End Property

        <Association(Name:="FK_BookAuthor_Book", Storage:="_BookBook", ThisKey:="Book", IsForeignKey:=True)> _
        Public Property BookBook() As Book
            Get
                Return Me._BookBook.Entity
            End Get
            Set(ByVal value As Book)
                Dim previousValue As Book = Me._BookBook.Entity
                If (((previousValue Is value) _
                   = False) _
                   OrElse (Me._BookBook.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._BookBook.Entity = Nothing
                        previousValue.BookAuthor.Remove(Me)
                    End If
                    Me._BookBook.Entity = value
                    If ((value Is Nothing) _
                       = False) Then
                        value.BookAuthor.Add(Me)
                        Me._Book = value.ID
                    Else
                        Me._Book = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("BookBook")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.Publisher")> _
    Partial Public Class Publisher
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As System.Guid

        Private _Name As String

        Private _Logo As System.Data.Linq.Binary

        Private _WebSite As String

        Private _Book As EntitySet(Of Book)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnNameChanged()
        End Sub
        Partial Private Sub OnLogoChanging(ByVal value As System.Data.Linq.Binary)
        End Sub
        Partial Private Sub OnLogoChanged()
        End Sub
        Partial Private Sub OnWebSiteChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnWebSiteChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._Book = New EntitySet(Of Book)(AddressOf Me.attach_Book, AddressOf Me.detach_Book)
        End Sub

        <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
        Public Property ID() As System.Guid
            Get
                Return Me._ID
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._ID = value) _
                   = False) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property Name() As String
            Get
                Return Me._Name
            End Get
            Set(ByVal value As String)
                If ((Me._Name = value) _
                   = False) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Logo", DbType:="Image", CanBeNull:=True, UpdateCheck:=UpdateCheck.Never)> _
        Public Property Logo() As System.Data.Linq.Binary
            Get
                Return Me._Logo
            End Get
            Set(ByVal value As System.Data.Linq.Binary)
                If (Me._Logo.Equals(value) = False) Then
                    Me.OnLogoChanging(value)
                    Me.SendPropertyChanging()
                    Me._Logo = value
                    Me.SendPropertyChanged("Logo")
                    Me.OnLogoChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_WebSite", DbType:="VarChar(200)")> _
        Public Property WebSite() As String
            Get
                Return Me._WebSite
            End Get
            Set(ByVal value As String)
                If ((Me._WebSite = value) _
                   = False) Then
                    Me.OnWebSiteChanging(value)
                    Me.SendPropertyChanging()
                    Me._WebSite = value
                    Me.SendPropertyChanged("WebSite")
                    Me.OnWebSiteChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Book_Publisher", Storage:="_Book", OtherKey:="Publisher", DeleteRule:="NO ACTION")> _
        Public Property Book() As EntitySet(Of Book)
            Get
                Return Me._Book
            End Get
            Set(ByVal value As EntitySet(Of Book))
                Me._Book.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Book(ByVal entity As Book)
            Me.SendPropertyChanging()
            entity.PublisherPublisher = Me
            Me.SendPropertyChanged("Book")
        End Sub

        Private Sub detach_Book(ByVal entity As Book)
            Me.SendPropertyChanging()
            entity.PublisherPublisher = Nothing
            Me.SendPropertyChanged("Book")
        End Sub
    End Class

    <Table(Name:="dbo.Review")> _
    Partial Public Class Review
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As System.Guid

        Private _Book As System.Guid

        Private _User As System.Guid

        Private _Rating As System.Nullable(Of Integer)

        Private _Comments As String

        Private _BookBook As EntityRef(Of Book)

        Private _UserUser As EntityRef(Of User)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnBookChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnBookChanged()
        End Sub
        Partial Private Sub OnUserChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnUserChanged()
        End Sub
        Partial Private Sub OnRatingChanging(ByVal value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnRatingChanged()
        End Sub
        Partial Private Sub OnCommentsChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCommentsChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._BookBook = CType(Nothing, EntityRef(Of Book))
            Me._UserUser = CType(Nothing, EntityRef(Of User))
        End Sub

        <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
        Public Property ID() As System.Guid
            Get
                Return Me._ID
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._ID = value) _
                   = False) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Book", DbType:="UniqueIdentifier NOT NULL")> _
        Public Property Book() As System.Guid
            Get
                Return Me._Book
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._Book = value) _
                   = False) Then
                    If Me._BookBook.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnBookChanging(value)
                    Me.SendPropertyChanging()
                    Me._Book = value
                    Me.SendPropertyChanged("Book")
                    Me.OnBookChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_User", DbType:="UniqueIdentifier NOT NULL")> _
        Public Property User() As System.Guid
            Get
                Return Me._User
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._User = value) _
                   = False) Then
                    If Me._UserUser.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnUserChanging(value)
                    Me.SendPropertyChanging()
                    Me._User = value
                    Me.SendPropertyChanged("User")
                    Me.OnUserChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Rating", DbType:="Int")> _
        Public Property Rating() As System.Nullable(Of Integer)
            Get
                Return Me._Rating
            End Get
            Set(ByVal value As System.Nullable(Of Integer))
                If (Me._Rating.Equals(value) = False) Then
                    Me.OnRatingChanging(value)
                    Me.SendPropertyChanging()
                    Me._Rating = value
                    Me.SendPropertyChanged("Rating")
                    Me.OnRatingChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Comments", DbType:="VarChar(2000)")> _
        Public Property Comments() As String
            Get
                Return Me._Comments
            End Get
            Set(ByVal value As String)
                If ((Me._Comments = value) _
                   = False) Then
                    Me.OnCommentsChanging(value)
                    Me.SendPropertyChanging()
                    Me._Comments = value
                    Me.SendPropertyChanged("Comments")
                    Me.OnCommentsChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Review_Book", Storage:="_BookBook", ThisKey:="Book", IsForeignKey:=True)> _
        Public Property BookBook() As Book
            Get
                Return Me._BookBook.Entity
            End Get
            Set(ByVal value As Book)
                Dim previousValue As Book = Me._BookBook.Entity
                If (((previousValue Is value) _
                   = False) _
                   OrElse (Me._BookBook.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._BookBook.Entity = Nothing
                        previousValue.Review.Remove(Me)
                    End If
                    Me._BookBook.Entity = value
                    If ((value Is Nothing) _
                       = False) Then
                        value.Review.Add(Me)
                        Me._Book = value.ID
                    Else
                        Me._Book = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("BookBook")
                End If
            End Set
        End Property

        <Association(Name:="FK_Review_User", Storage:="_UserUser", ThisKey:="User", IsForeignKey:=True)> _
        Public Property UserUser() As User
            Get
                Return Me._UserUser.Entity
            End Get
            Set(ByVal value As User)
                Dim previousValue As User = Me._UserUser.Entity
                If (((previousValue Is value) _
                   = False) _
                   OrElse (Me._UserUser.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._UserUser.Entity = Nothing
                        previousValue.Review.Remove(Me)
                    End If
                    Me._UserUser.Entity = value
                    If ((value Is Nothing) _
                       = False) Then
                        value.Review.Add(Me)
                        Me._User = value.ID
                    Else
                        Me._User = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("UserUser")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.Subject")> _
    Partial Public Class Subject
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As System.Guid

        Private _Name As String

        Private _Description As String

        Private _Book As EntitySet(Of Book)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnNameChanged()
        End Sub
        Partial Private Sub OnDescriptionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnDescriptionChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._Book = New EntitySet(Of Book)(AddressOf Me.attach_Book, AddressOf Me.detach_Book)
        End Sub

        <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
        Public Property ID() As System.Guid
            Get
                Return Me._ID
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._ID = value) _
                   = False) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=False)> _
        Public Property Name() As String
            Get
                Return Me._Name
            End Get
            Set(ByVal value As String)
                If ((Me._Name = value) _
                   = False) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Description", DbType:="VarChar(200)")> _
        Public Property Description() As String
            Get
                Return Me._Description
            End Get
            Set(ByVal value As String)
                If ((Me._Description = value) _
                   = False) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Book_Subject", Storage:="_Book", OtherKey:="Subject", DeleteRule:="NO ACTION")> _
        Public Property Book() As EntitySet(Of Book)
            Get
                Return Me._Book
            End Get
            Set(ByVal value As EntitySet(Of Book))
                Me._Book.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Book(ByVal entity As Book)
            Me.SendPropertyChanging()
            entity.SubjectSubject = Me
            Me.SendPropertyChanged("Book")
        End Sub

        Private Sub detach_Book(ByVal entity As Book)
            Me.SendPropertyChanging()
            entity.SubjectSubject = Nothing
            Me.SendPropertyChanged("Book")
        End Sub
    End Class

    <Table(Name:="dbo.User")> _
    Partial Public Class User
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As System.Guid

        Private _Name As String

        Private _UserType As String

        Private _Publisher As System.Nullable(Of System.Guid)

        Private _Author As System.Nullable(Of System.Guid)

        Private _Review As EntitySet(Of Review)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(ByVal value As System.Guid)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnNameChanged()
        End Sub
        Partial Private Sub OnUserTypeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnUserTypeChanged()
        End Sub
        Partial Private Sub OnPublisherChanging(ByVal value As System.Nullable(Of System.Guid))
        End Sub
        Partial Private Sub OnPublisherChanged()
        End Sub
        Partial Private Sub OnAuthorChanging(ByVal value As System.Nullable(Of System.Guid))
        End Sub
        Partial Private Sub OnAuthorChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._Review = New EntitySet(Of Review)(AddressOf Me.attach_Review, AddressOf Me.detach_Review)
        End Sub

        <Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
        Public Property ID() As System.Guid
            Get
                Return Me._ID
            End Get
            Set(ByVal value As System.Guid)
                If ((Me._ID = value) _
                   = False) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Name", DbType:="VarChar(20) NOT NULL", CanBeNull:=False)> _
        Public Property Name() As String
            Get
                Return Me._Name
            End Get
            Set(ByVal value As String)
                If ((Me._Name = value) _
                   = False) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_UserType", DbType:="NChar(1) NOT NULL", CanBeNull:=False)> _
        Public Property UserType() As String
            Get
                Return Me._UserType
            End Get
            Set(ByVal value As String)
                If ((Me._UserType = value) _
                   = False) Then
                    Me.OnUserTypeChanging(value)
                    Me.SendPropertyChanging()
                    Me._UserType = value
                    Me.SendPropertyChanged("UserType")
                    Me.OnUserTypeChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Publisher", DbType:="UniqueIdentifier")> _
        Public Property Publisher() As System.Nullable(Of System.Guid)
            Get
                Return Me._Publisher
            End Get
            Set(ByVal value As System.Nullable(Of System.Guid))
                If (Me._Publisher.Equals(value) = False) Then
                    Me.OnPublisherChanging(value)
                    Me.SendPropertyChanging()
                    Me._Publisher = value
                    Me.SendPropertyChanged("Publisher")
                    Me.OnPublisherChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Author", DbType:="UniqueIdentifier")> _
        Public Property Author() As System.Nullable(Of System.Guid)
            Get
                Return Me._Author
            End Get
            Set(ByVal value As System.Nullable(Of System.Guid))
                If (Me._Author.Equals(value) = False) Then
                    Me.OnAuthorChanging(value)
                    Me.SendPropertyChanging()
                    Me._Author = value
                    Me.SendPropertyChanged("Author")
                    Me.OnAuthorChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Review_User", Storage:="_Review", OtherKey:="User", DeleteRule:="NO ACTION")> _
        Public Property Review() As EntitySet(Of Review)
            Get
                Return Me._Review
            End Get
            Set(ByVal value As EntitySet(Of Review))
                Me._Review.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Review(ByVal entity As Review)
            Me.SendPropertyChanging()
            entity.UserUser = Me
            Me.SendPropertyChanged("Review")
        End Sub

        Private Sub detach_Review(ByVal entity As Review)
            Me.SendPropertyChanging()
            entity.UserUser = Nothing
            Me.SendPropertyChanged("Review")
        End Sub
    End Class
End Namespace