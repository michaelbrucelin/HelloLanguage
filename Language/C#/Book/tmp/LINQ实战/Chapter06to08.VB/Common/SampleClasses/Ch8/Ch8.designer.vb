'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace SampleClasses.Ch8
	
	<System.Data.Linq.Mapping.DatabaseAttribute(Name:="lia")>  _
	Partial Public Class Ch8DataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAuthor(instance As Author)
    End Sub
    Partial Private Sub UpdateAuthor(instance As Author)
    End Sub
    Partial Private Sub DeleteAuthor(instance As Author)
    End Sub
    Partial Private Sub InsertBook(instance As Book)
    End Sub
    Partial Private Sub UpdateBook(instance As Book)
    End Sub
    Partial Private Sub DeleteBook(instance As Book)
    End Sub
    Partial Private Sub InsertPublisher(instance As Publisher)
    End Sub
    Partial Private Sub UpdatePublisher(instance As Publisher)
    End Sub
    Partial Private Sub DeletePublisher(instance As Publisher)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.LinqInAction.Chapter06to08.Common.My.MySettings.Default.liaConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Authors() As System.Data.Linq.Table(Of Author)
			Get
				Return Me.GetTable(Of Author)
			End Get
		End Property
		
		Public ReadOnly Property Books() As System.Data.Linq.Table(Of Book)
			Get
				Return Me.GetTable(Of Book)
			End Get
		End Property
		
		Public ReadOnly Property Publishers() As System.Data.Linq.Table(Of Publisher)
			Get
				Return Me.GetTable(Of Publisher)
			End Get
		End Property
		
		<FunctionAttribute(Name:="dbo.fnBookCountForPublisher", IsComposable:=true)>  _
		Public Function fnBookCountForPublisher(<Parameter(Name:="PublisherId", DbType:="UniqueIdentifier")> ByVal publisherId As System.Nullable(Of System.Guid)) As System.Nullable(Of Integer)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), publisherId).ReturnValue,System.Nullable(Of Integer))
		End Function
	End Class
	
	<Table(Name:="dbo.Author")>  _
	Partial Public Class Author
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As System.Guid
		
		Private _LastName As String
		
		Private _FirstName As String
		
		Private _WebSite As String
		
		Private _TimeStamp() As Byte
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnWebSiteChanging(value As String)
    End Sub
    Partial Private Sub OnWebSiteChanged()
    End Sub
    Partial Private Sub OnTimeStampChanging(value As Byte())
    End Sub
    Partial Private Sub OnTimeStampChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property ID() As System.Guid
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set
				If (String.Equals(Me._LastName, value) = false) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_FirstName", DbType:="VarChar(30) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set
				If (String.Equals(Me._FirstName, value) = false) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_WebSite", DbType:="VarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property WebSite() As String
			Get
				Return Me._WebSite
			End Get
			Set
				If (String.Equals(Me._WebSite, value) = false) Then
					Me.OnWebSiteChanging(value)
					Me.SendPropertyChanging
					Me._WebSite = value
					Me.SendPropertyChanged("WebSite")
					Me.OnWebSiteChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_TimeStamp", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property TimeStamp() As Byte()
			Get
				Return Me._TimeStamp
			End Get
			Set
				If (Object.Equals(Me._TimeStamp, value) = false) Then
					Me.OnTimeStampChanging(value)
					Me.SendPropertyChanging
					Me._TimeStamp = value
					Me.SendPropertyChanged("TimeStamp")
					Me.OnTimeStampChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="dbo.Book")>  _
	Partial Public Class Book
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As System.Guid
		
		Private _Isbn As String
		
		Private _Notes As String
		
		Private _PageCount As Integer
		
		Private _Price As System.Nullable(Of Decimal)
		
		Private _PubDate As System.Nullable(Of Date)
		
		Private _Publisher As System.Guid
		
		Private _Subject As System.Guid
		
		Private _Summary As String
		
		Private _Title As String
		
		Private _Publisher1 As EntityRef(Of Publisher)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnIsbnChanging(value As String)
    End Sub
    Partial Private Sub OnIsbnChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnPageCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageCountChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnPubDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPubDateChanged()
    End Sub
    Partial Private Sub OnPublisherChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPublisherChanged()
    End Sub
    Partial Private Sub OnSubjectChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubjectChanged()
    End Sub
    Partial Private Sub OnSummaryChanging(value As String)
    End Sub
    Partial Private Sub OnSummaryChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Publisher1 = CType(Nothing, EntityRef(Of Publisher))
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ID() As System.Guid
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Isbn", DbType:="NChar(13)")>  _
		Public Property Isbn() As String
			Get
				Return Me._Isbn
			End Get
			Set
				If (String.Equals(Me._Isbn, value) = false) Then
					Me.OnIsbnChanging(value)
					Me.SendPropertyChanging
					Me._Isbn = value
					Me.SendPropertyChanged("Isbn")
					Me.OnIsbnChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Notes", DbType:="VarChar(2000)")>  _
		Public Property Notes() As String
			Get
				Return Me._Notes
			End Get
			Set
				If (String.Equals(Me._Notes, value) = false) Then
					Me.OnNotesChanging(value)
					Me.SendPropertyChanging
					Me._Notes = value
					Me.SendPropertyChanged("Notes")
					Me.OnNotesChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_PageCount", DbType:="Int NOT NULL")>  _
		Public Property PageCount() As Integer
			Get
				Return Me._PageCount
			End Get
			Set
				If ((Me._PageCount = value)  _
							= false) Then
					Me.OnPageCountChanging(value)
					Me.SendPropertyChanging
					Me._PageCount = value
					Me.SendPropertyChanged("PageCount")
					Me.OnPageCountChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Price", DbType:="Money")>  _
		Public Property Price() As System.Nullable(Of Decimal)
			Get
				Return Me._Price
			End Get
			Set
				If (Me._Price.Equals(value) = false) Then
					Me.OnPriceChanging(value)
					Me.SendPropertyChanging
					Me._Price = value
					Me.SendPropertyChanged("Price")
					Me.OnPriceChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_PubDate", DbType:="DateTime")>  _
		Public Property PubDate() As System.Nullable(Of Date)
			Get
				Return Me._PubDate
			End Get
			Set
				If (Me._PubDate.Equals(value) = false) Then
					Me.OnPubDateChanging(value)
					Me.SendPropertyChanging
					Me._PubDate = value
					Me.SendPropertyChanged("PubDate")
					Me.OnPubDateChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Publisher", DbType:="UniqueIdentifier NOT NULL")>  _
		Public Property Publisher() As System.Guid
			Get
				Return Me._Publisher
			End Get
			Set
				If ((Me._Publisher = value)  _
							= false) Then
					If Me._Publisher1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnPublisherChanging(value)
					Me.SendPropertyChanging
					Me._Publisher = value
					Me.SendPropertyChanged("Publisher")
					Me.OnPublisherChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Subject", DbType:="UniqueIdentifier NOT NULL")>  _
		Public Property Subject() As System.Guid
			Get
				Return Me._Subject
			End Get
			Set
				If ((Me._Subject = value)  _
							= false) Then
					Me.OnSubjectChanging(value)
					Me.SendPropertyChanging
					Me._Subject = value
					Me.SendPropertyChanged("Subject")
					Me.OnSubjectChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Summary", DbType:="VarChar(2000)")>  _
		Public Property Summary() As String
			Get
				Return Me._Summary
			End Get
			Set
				If (String.Equals(Me._Summary, value) = false) Then
					Me.OnSummaryChanging(value)
					Me.SendPropertyChanging
					Me._Summary = value
					Me.SendPropertyChanged("Summary")
					Me.OnSummaryChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Title", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Association(Name:="Publisher_Book", Storage:="_Publisher1", ThisKey:="Publisher", IsForeignKey:=true)>  _
		Public Property Publisher1() As Publisher
			Get
				Return Me._Publisher1.Entity
			End Get
			Set
				Dim previousValue As Publisher = Me._Publisher1.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Publisher1.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Publisher1.Entity = Nothing
						previousValue.Books.Remove(Me)
					End If
					Me._Publisher1.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Books.Add(Me)
						Me._Publisher = value.ID
					Else
						Me._Publisher = CType(Nothing, System.Guid)
					End If
					Me.SendPropertyChanged("Publisher1")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="dbo.Publisher")>  _
	Partial Public Class Publisher
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As System.Guid
		
		Private _Name As String
		
		Private _Logo() As Byte
		
		Private _WebSite As String
		
		Private _Books As EntitySet(Of Book)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnLogoChanging(value As Byte())
    End Sub
    Partial Private Sub OnLogoChanged()
    End Sub
    Partial Private Sub OnWebSiteChanging(value As String)
    End Sub
    Partial Private Sub OnWebSiteChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Books = New EntitySet(Of Book)(AddressOf Me.attach_Books, AddressOf Me.detach_Books)
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ID() As System.Guid
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Logo", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Logo() As Byte()
			Get
				Return Me._Logo
			End Get
			Set
				If (Object.Equals(Me._Logo, value) = false) Then
					Me.OnLogoChanging(value)
					Me.SendPropertyChanging
					Me._Logo = value
					Me.SendPropertyChanged("Logo")
					Me.OnLogoChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_WebSite", DbType:="VarChar(200)")>  _
		Public Property WebSite() As String
			Get
				Return Me._WebSite
			End Get
			Set
				If (String.Equals(Me._WebSite, value) = false) Then
					Me.OnWebSiteChanging(value)
					Me.SendPropertyChanging
					Me._WebSite = value
					Me.SendPropertyChanged("WebSite")
					Me.OnWebSiteChanged
				End If
			End Set
		End Property
		
		<Association(Name:="Publisher_Book", Storage:="_Books", OtherKey:="Publisher")>  _
		Public Property Books() As EntitySet(Of Book)
			Get
				Return Me._Books
			End Get
			Set
				Me._Books.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Books(ByVal entity As Book)
			Me.SendPropertyChanging
			entity.Publisher1 = Me
		End Sub
		
		Private Sub detach_Books(ByVal entity As Book)
			Me.SendPropertyChanging
			entity.Publisher1 = Nothing
		End Sub
	End Class
End Namespace
