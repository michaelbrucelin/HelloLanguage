//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1318
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace lia
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data.Linq.Provider;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Reflection;
    using LinqInAction.LinqBooks.Common.CSharp;

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "lia")]
    public partial class Lia : System.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        static Lia()
        {
        }

        public Lia(string connection) : base(connection, mappingSource)
        {
        }

        public Lia(System.Data.IDbConnection connection) : base(connection, mappingSource)
        {
        }

        public Lia(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : base(connection, mappingSource)
        {
        }

        public Lia(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : base(connection, mappingSource)
        {
        }

        public System.Data.Linq.Table<Author> Author
        {
            get
            {
                return this.GetTable<Author>();
            }
        }
    }
    [Table(Name = "Author")]
    public partial class Author : System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {

        private static PropertyChangedEventArgs emptyEventArgs = new PropertyChangedEventArgs(String.Empty);
        private static PropertyChangingEventArgs changingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Guid _ID;

        private string _LastName;

        private string _FirstName;

        private string _WebSite;

        private byte[] _TimeStamp;

        private EntitySet<BookAuthor> _BookAuthor;

        public Author()
        {
            this._BookAuthor = new EntitySet<BookAuthor>(new Action<BookAuthor>(this.attach_BookAuthor), new Action<BookAuthor>(this.detach_BookAuthor));
        }

        [Column(Storage = "_ID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        public System.Guid ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnPropertyChanging();
                    this._ID = value;
                    this.OnPropertyChanged();
                }
            }
        }

        [Column(Storage = "_LastName", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if ((this._LastName != value))
                {
                    this.OnPropertyChanging();
                    this._LastName = value;
                    this.OnPropertyChanged();
                }
            }
        }

        [Column(Storage = "_FirstName", DbType = "VarChar(30) NOT NULL", CanBeNull = false)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if ((this._FirstName != value))
                {
                    this.OnPropertyChanging();
                    this._FirstName = value;
                    this.OnPropertyChanged();
                }
            }
        }

        [Column(Storage = "_WebSite", DbType = "VarChar(200)")]
        public string WebSite
        {
            get
            {
                return this._WebSite;
            }
            set
            {
                if ((this._WebSite != value))
                {
                    this.OnPropertyChanging();
                    this._WebSite = value;
                    this.OnPropertyChanged();
                }
            }
        }

        [Column(Storage = "_TimeStamp", AutoSync = System.Data.Linq.Mapping.AutoSync.Always, DbType = "rowversion NOT NULL", CanBeNull = false, IsDbGenerated = true, IsVersion = true)]
        public byte[] TimeStamp
        {
            get
            {
                return this._TimeStamp;
            }
            set
            {
                if ((this._TimeStamp != value))
                {
                    this.OnPropertyChanging();
                    this._TimeStamp = value;
                    this.OnPropertyChanged();
                }
            }
        }

        [System.Data.Linq.Mapping.Association(Name = "FK_BookAuthor_Author", Storage = "_BookAuthor", OtherKey = "Author", DeleteRule = "NO ACTION")]
        public EntitySet<BookAuthor> BookAuthor
        {
            get
            {
                return this._BookAuthor;
            }
            set
            {
                this._BookAuthor.Assign(value);
            }
        }

        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, changingEventArgs);
            }
        }

        protected virtual void OnPropertyChanged()
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, emptyEventArgs);
            }
        }

        private void attach_BookAuthor(BookAuthor entity)
        {
            this.OnPropertyChanging();
            entity.Author1 = this;
            this.OnPropertyChanged();
        }

        private void detach_BookAuthor(BookAuthor entity)
        {
            this.OnPropertyChanging();
            entity.Author1 = null;
            this.OnPropertyChanged();
        }
    }
}