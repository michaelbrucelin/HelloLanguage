//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqInAction.LinqToSql {
  using System;
  using System.Collections.Generic;
  using System.ComponentModel;
  using System.Reflection;
  using System.Query;
  using System.Expressions;
  using System.Data;
  using System.Data.DLinq;
  
  
  public partial class LinqInAction : DataContext {
    
    public Table<Publisher> Publishers;
    
    public Table<Subject> Subjects;
    
    public Table<Author> Authors;
    
    public Table<BookAuthor> BookAuthors;
    
    public Table<Review> Reviews;
    
    public Table<User> Users;
    
    public Table<Sysdiagram> Sysdiagrams;
    
    public Table<Book> Books;
    
    public LinqInAction(string connection) : 
        base(connection) {
    }
    
    public LinqInAction(System.Data.IDbConnection connection) : 
        base(connection) {
    }
    
    public LinqInAction(string connection, System.Data.DLinq.MappingSource mappingSource) : 
        base(connection, mappingSource) {
    }
    
    public LinqInAction(System.Data.IDbConnection connection, System.Data.DLinq.MappingSource mappingSource) : 
        base(connection, mappingSource) {
    }
  }
  
  [Table(Name="Publisher")]
  public partial class Publisher : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private System.Guid _ID;
    
    private string _Name;
    
    private byte[] _Logo;
    
    private EntitySet<Book> _Books;
    
    public Publisher() {
      this._Books = new EntitySet<Book>(new Notification<Book>(this.attach_Books), new Notification<Book>(this.detach_Books));
    }
    
    [Column(Storage="_ID", DBType="UniqueIdentifier NOT NULL", Id=true)]
    public System.Guid ID {
      get {
        return this._ID;
      }
      set {
        if ((this._ID != value)) {
          this.OnPropertyChanging("ID");
          this._ID = value;
          this.OnPropertyChanged("ID");
        }
      }
    }
    
    [Column(Storage="_Name", DBType="VarChar(50) NOT NULL")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        if ((this._Name != value)) {
          this.OnPropertyChanging("Name");
          this._Name = value;
          this.OnPropertyChanged("Name");
        }
      }
    }
    
    [Column(Storage="_Logo", DBType="Image", UpdateCheck=System.Data.DLinq.UpdateCheck.Never)]
    public byte[] Logo {
      get {
        return this._Logo;
      }
      set {
        if ((this._Logo != value)) {
          this.OnPropertyChanging("Logo");
          this._Logo = value;
          this.OnPropertyChanged("Logo");
        }
      }
    }
    
    [Association(Name="FK_Book_Publisher", Storage="_Books", OtherKey="PublisherId")]
    public EntitySet<Book> Books {
      get {
        return this._Books;
      }
      set {
        this._Books.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_Books(Book entity) {
      this.OnPropertyChanging(null);
      entity.Publisher = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Books(Book entity) {
      this.OnPropertyChanging(null);
      entity.Publisher = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Subject")]
  public partial class Subject : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private System.Guid _ID;
    
    private string _Name;
    
    private string _Description;
    
    private EntitySet<Book> _Books;
    
    public Subject() {
      this._Books = new EntitySet<Book>(new Notification<Book>(this.attach_Books), new Notification<Book>(this.detach_Books));
    }
    
    [Column(Storage="_ID", DBType="UniqueIdentifier NOT NULL", Id=true)]
    public System.Guid ID {
      get {
        return this._ID;
      }
      set {
        if ((this._ID != value)) {
          this.OnPropertyChanging("ID");
          this._ID = value;
          this.OnPropertyChanged("ID");
        }
      }
    }
    
    [Column(Storage="_Name", DBType="VarChar(100) NOT NULL")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        if ((this._Name != value)) {
          this.OnPropertyChanging("Name");
          this._Name = value;
          this.OnPropertyChanged("Name");
        }
      }
    }
    
    [Column(Storage="_Description", DBType="VarChar(200)")]
    public string Description {
      get {
        return this._Description;
      }
      set {
        if ((this._Description != value)) {
          this.OnPropertyChanging("Description");
          this._Description = value;
          this.OnPropertyChanged("Description");
        }
      }
    }
    
    [Association(Name="FK_Book_Subject", Storage="_Books", OtherKey="SubjectId")]
    public EntitySet<Book> Books {
      get {
        return this._Books;
      }
      set {
        this._Books.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_Books(Book entity) {
      this.OnPropertyChanging(null);
      entity.Subject = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Books(Book entity) {
      this.OnPropertyChanging(null);
      entity.Subject = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Author")]
  public partial class Author : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private System.Guid _ID;
    
    private string _LastName;
    
    private string _FirstName;
    
    private string _WebSite;
    
    private EntitySet<BookAuthor> _BookAuthors;
    
    public Author() {
      this._BookAuthors = new EntitySet<BookAuthor>(new Notification<BookAuthor>(this.attach_BookAuthors), new Notification<BookAuthor>(this.detach_BookAuthors));
    }
    
    [Column(Storage="_ID", DBType="UniqueIdentifier NOT NULL", Id=true)]
    public System.Guid ID {
      get {
        return this._ID;
      }
      set {
        if ((this._ID != value)) {
          this.OnPropertyChanging("ID");
          this._ID = value;
          this.OnPropertyChanged("ID");
        }
      }
    }
    
    [Column(Storage="_LastName", DBType="VarChar(50) NOT NULL")]
    public string LastName {
      get {
        return this._LastName;
      }
      set {
        if ((this._LastName != value)) {
          this.OnPropertyChanging("LastName");
          this._LastName = value;
          this.OnPropertyChanged("LastName");
        }
      }
    }
    
    [Column(Storage="_FirstName", DBType="VarChar(30)")]
    public string FirstName {
      get {
        return this._FirstName;
      }
      set {
        if ((this._FirstName != value)) {
          this.OnPropertyChanging("FirstName");
          this._FirstName = value;
          this.OnPropertyChanged("FirstName");
        }
      }
    }
    
    [Column(Storage="_WebSite", DBType="VarChar(200)")]
    public string WebSite {
      get {
        return this._WebSite;
      }
      set {
        if ((this._WebSite != value)) {
          this.OnPropertyChanging("WebSite");
          this._WebSite = value;
          this.OnPropertyChanged("WebSite");
        }
      }
    }
    
    [Association(Name="FK_BookAuthor_Author", Storage="_BookAuthors", OtherKey="AuthorId")]
    public EntitySet<BookAuthor> BookAuthors {
      get {
        return this._BookAuthors;
      }
      set {
        this._BookAuthors.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_BookAuthors(BookAuthor entity) {
      this.OnPropertyChanging(null);
      entity.Author = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_BookAuthors(BookAuthor entity) {
      this.OnPropertyChanging(null);
      entity.Author = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="BookAuthor")]
  public partial class BookAuthor : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private System.Guid _AuthorId;
    
    private System.Guid _BookId;
    
    private System.Nullable<int> _AuthorOrder;
    
    private EntityRef<Author> _Author;
    
    private EntityRef<Book> _Book;
    
    public BookAuthor() {
      this._Author = default(EntityRef<Author>);
      this._Book = default(EntityRef<Book>);
    }
    
    [Column(Storage="_AuthorId", DBType="UniqueIdentifier NOT NULL", Id=true)]
    public System.Guid AuthorId {
      get {
        return this._AuthorId;
      }
      set {
        if ((this._AuthorId != value)) {
          this.OnPropertyChanging("AuthorId");
          this._AuthorId = value;
          this.OnPropertyChanged("AuthorId");
        }
      }
    }
    
    [Column(Storage="_BookId", DBType="UniqueIdentifier NOT NULL", Id=true)]
    public System.Guid BookId {
      get {
        return this._BookId;
      }
      set {
        if ((this._BookId != value)) {
          this.OnPropertyChanging("BookId");
          this._BookId = value;
          this.OnPropertyChanged("BookId");
        }
      }
    }
    
    [Column(Storage="_AuthorOrder", DBType="Int")]
    public System.Nullable<int> AuthorOrder {
      get {
        return this._AuthorOrder;
      }
      set {
        if ((this._AuthorOrder != value)) {
          this.OnPropertyChanging("AuthorOrder");
          this._AuthorOrder = value;
          this.OnPropertyChanged("AuthorOrder");
        }
      }
    }
    
    [Association(Name="FK_BookAuthor_Author", Storage="_Author", ThisKey="AuthorId", IsParent=true)]
    public Author Author {
      get {
        return this._Author.Entity;
      }
      set {
        Author v = this._Author.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Author");
          if ((v != null)) {
            this._Author.Entity = null;
            v.BookAuthors.Remove(this);
          }
          this._Author.Entity = value;
          if ((value != null)) {
            value.BookAuthors.Add(this);
          }
          this.OnPropertyChanged("Author");
        }
      }
    }
    
    [Association(Name="FK_BookAuthor_Book", Storage="_Book", ThisKey="BookId", IsParent=true)]
    public Book Book {
      get {
        return this._Book.Entity;
      }
      set {
        Book v = this._Book.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Book");
          if ((v != null)) {
            this._Book.Entity = null;
            v.BookAuthors.Remove(this);
          }
          this._Book.Entity = value;
          if ((value != null)) {
            value.BookAuthors.Add(this);
          }
          this.OnPropertyChanged("Book");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
  }
  
  [Table(Name="Review")]
  public partial class Review : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private System.Guid _ID;
    
    private System.Guid _BookId;
    
    private System.Guid _UserId;
    
    private System.Nullable<int> _Rating;
    
    private string _Comments;
    
    private EntityRef<Book> _Book;
    
    private EntityRef<User> _User;
    
    public Review() {
      this._Book = default(EntityRef<Book>);
      this._User = default(EntityRef<User>);
    }
    
    [Column(Storage="_ID", DBType="UniqueIdentifier NOT NULL", Id=true)]
    public System.Guid ID {
      get {
        return this._ID;
      }
      set {
        if ((this._ID != value)) {
          this.OnPropertyChanging("ID");
          this._ID = value;
          this.OnPropertyChanged("ID");
        }
      }
    }
    
    [Column(Storage="_BookId", DBType="UniqueIdentifier NOT NULL")]
    public System.Guid BookId {
      get {
        return this._BookId;
      }
      set {
        if ((this._BookId != value)) {
          this.OnPropertyChanging("BookId");
          this._BookId = value;
          this.OnPropertyChanged("BookId");
        }
      }
    }
    
    [Column(Storage="_UserId", DBType="UniqueIdentifier NOT NULL")]
    public System.Guid UserId {
      get {
        return this._UserId;
      }
      set {
        if ((this._UserId != value)) {
          this.OnPropertyChanging("UserId");
          this._UserId = value;
          this.OnPropertyChanged("UserId");
        }
      }
    }
    
    [Column(Storage="_Rating", DBType="Int")]
    public System.Nullable<int> Rating {
      get {
        return this._Rating;
      }
      set {
        if ((this._Rating != value)) {
          this.OnPropertyChanging("Rating");
          this._Rating = value;
          this.OnPropertyChanged("Rating");
        }
      }
    }
    
    [Column(Storage="_Comments", DBType="VarChar(2000)")]
    public string Comments {
      get {
        return this._Comments;
      }
      set {
        if ((this._Comments != value)) {
          this.OnPropertyChanging("Comments");
          this._Comments = value;
          this.OnPropertyChanged("Comments");
        }
      }
    }
    
    [Association(Name="FK_Review_Book", Storage="_Book", ThisKey="BookId", IsParent=true)]
    public Book Book {
      get {
        return this._Book.Entity;
      }
      set {
        Book v = this._Book.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Book");
          if ((v != null)) {
            this._Book.Entity = null;
            v.Reviews.Remove(this);
          }
          this._Book.Entity = value;
          if ((value != null)) {
            value.Reviews.Add(this);
          }
          this.OnPropertyChanged("Book");
        }
      }
    }
    
    [Association(Name="FK_Review_User", Storage="_User", ThisKey="UserId", IsParent=true)]
    public User User {
      get {
        return this._User.Entity;
      }
      set {
        User v = this._User.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("User");
          if ((v != null)) {
            this._User.Entity = null;
            v.Reviews.Remove(this);
          }
          this._User.Entity = value;
          if ((value != null)) {
            value.Reviews.Add(this);
          }
          this.OnPropertyChanged("User");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
  }
  
  [Table(Name="User")]
  public partial class User : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private System.Guid _ID;
    
    private string _Name;
    
    private EntitySet<Review> _Reviews;
    
    public User() {
      this._Reviews = new EntitySet<Review>(new Notification<Review>(this.attach_Reviews), new Notification<Review>(this.detach_Reviews));
    }
    
    [Column(Storage="_ID", DBType="UniqueIdentifier NOT NULL", Id=true)]
    public System.Guid ID {
      get {
        return this._ID;
      }
      set {
        if ((this._ID != value)) {
          this.OnPropertyChanging("ID");
          this._ID = value;
          this.OnPropertyChanged("ID");
        }
      }
    }
    
    [Column(Storage="_Name", DBType="VarChar(20) NOT NULL")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        if ((this._Name != value)) {
          this.OnPropertyChanging("Name");
          this._Name = value;
          this.OnPropertyChanged("Name");
        }
      }
    }
    
    [Association(Name="FK_Review_User", Storage="_Reviews", OtherKey="UserId")]
    public EntitySet<Review> Reviews {
      get {
        return this._Reviews;
      }
      set {
        this._Reviews.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_Reviews(Review entity) {
      this.OnPropertyChanging(null);
      entity.User = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Reviews(Review entity) {
      this.OnPropertyChanging(null);
      entity.User = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="sysdiagrams")]
  public partial class Sysdiagram : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private string _Name;
    
    private int _PrincipalId;
    
    private int _DiagramId;
    
    private System.Nullable<int> _Version;
    
    private byte[] _Definition;
    
    public Sysdiagram() {
    }
    
    [Column(Name="name", Storage="_Name", DBType="NVarChar(128) NOT NULL")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        if ((this._Name != value)) {
          this.OnPropertyChanging("Name");
          this._Name = value;
          this.OnPropertyChanged("Name");
        }
      }
    }
    
    [Column(Name="principal_id", Storage="_PrincipalId", DBType="Int NOT NULL")]
    public int PrincipalId {
      get {
        return this._PrincipalId;
      }
      set {
        if ((this._PrincipalId != value)) {
          this.OnPropertyChanging("PrincipalId");
          this._PrincipalId = value;
          this.OnPropertyChanged("PrincipalId");
        }
      }
    }
    
    [Column(Name="diagram_id", Storage="_DiagramId", DBType="Int NOT NULL IDENTITY", Id=true, AutoGen=true)]
    public int DiagramId {
      get {
        return this._DiagramId;
      }
      set {
        if ((this._DiagramId != value)) {
          this.OnPropertyChanging("DiagramId");
          this._DiagramId = value;
          this.OnPropertyChanged("DiagramId");
        }
      }
    }
    
    [Column(Name="version", Storage="_Version", DBType="Int")]
    public System.Nullable<int> Version {
      get {
        return this._Version;
      }
      set {
        if ((this._Version != value)) {
          this.OnPropertyChanging("Version");
          this._Version = value;
          this.OnPropertyChanged("Version");
        }
      }
    }
    
    [Column(Name="definition", Storage="_Definition", DBType="VarBinary(2147483647)", UpdateCheck=System.Data.DLinq.UpdateCheck.Never)]
    public byte[] Definition {
      get {
        return this._Definition;
      }
      set {
        if ((this._Definition != value)) {
          this.OnPropertyChanging("Definition");
          this._Definition = value;
          this.OnPropertyChanged("Definition");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
  }
  
  [Table(Name="Book")]
  public partial class Book : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private System.Guid _ID;
    
    private string _Title;
    
    private System.Guid _SubjectId;
    
    private System.Guid _PublisherId;
    
    private System.Nullable<System.DateTime> _PubDate;
    
    private System.Nullable<decimal> _Price;
    
    private string _Isbn;
    
    private string _Summary;
    
    private string _Notes;
    
    private EntityRef<Publisher> _Publisher;
    
    private EntityRef<Subject> _Subject;
    
    private EntitySet<BookAuthor> _BookAuthors;
    
    private EntitySet<Review> _Reviews;
    
    public Book() {
      this._Publisher = default(EntityRef<Publisher>);
      this._Subject = default(EntityRef<Subject>);
      this._BookAuthors = new EntitySet<BookAuthor>(new Notification<BookAuthor>(this.attach_BookAuthors), new Notification<BookAuthor>(this.detach_BookAuthors));
      this._Reviews = new EntitySet<Review>(new Notification<Review>(this.attach_Reviews), new Notification<Review>(this.detach_Reviews));
    }
    
    [Column(Storage="_ID", DBType="UniqueIdentifier NOT NULL", Id=true)]
    public System.Guid ID {
      get {
        return this._ID;
      }
      set {
        if ((this._ID != value)) {
          this.OnPropertyChanging("ID");
          this._ID = value;
          this.OnPropertyChanged("ID");
        }
      }
    }
    
    [Column(Storage="_Title", DBType="VarChar(100) NOT NULL")]
    public string Title {
      get {
        return this._Title;
      }
      set {
        if ((this._Title != value)) {
          this.OnPropertyChanging("Title");
          this._Title = value;
          this.OnPropertyChanged("Title");
        }
      }
    }
    
    [Column(Storage="_SubjectId", DBType="UniqueIdentifier NOT NULL")]
    public System.Guid SubjectId {
      get {
        return this._SubjectId;
      }
      set {
        if ((this._SubjectId != value)) {
          this.OnPropertyChanging("SubjectId");
          this._SubjectId = value;
          this.OnPropertyChanged("SubjectId");
        }
      }
    }
    
    [Column(Storage="_PublisherId", DBType="UniqueIdentifier NOT NULL")]
    public System.Guid PublisherId {
      get {
        return this._PublisherId;
      }
      set {
        if ((this._PublisherId != value)) {
          this.OnPropertyChanging("PublisherId");
          this._PublisherId = value;
          this.OnPropertyChanged("PublisherId");
        }
      }
    }
    
    [Column(Storage="_PubDate", DBType="DateTime")]
    public System.Nullable<System.DateTime> PubDate {
      get {
        return this._PubDate;
      }
      set {
        if ((this._PubDate != value)) {
          this.OnPropertyChanging("PubDate");
          this._PubDate = value;
          this.OnPropertyChanged("PubDate");
        }
      }
    }
    
    [Column(Storage="_Price", DBType="Money")]
    public System.Nullable<decimal> Price {
      get {
        return this._Price;
      }
      set {
        if ((this._Price != value)) {
          this.OnPropertyChanging("Price");
          this._Price = value;
          this.OnPropertyChanged("Price");
        }
      }
    }
    
    [Column(Storage="_Isbn", DBType="Char(13)")]
    public string Isbn {
      get {
        return this._Isbn;
      }
      set {
        if ((this._Isbn != value)) {
          this.OnPropertyChanging("Isbn");
          this._Isbn = value;
          this.OnPropertyChanged("Isbn");
        }
      }
    }
    
    [Column(Storage="_Summary", DBType="VarChar(2000)")]
    public string Summary {
      get {
        return this._Summary;
      }
      set {
        if ((this._Summary != value)) {
          this.OnPropertyChanging("Summary");
          this._Summary = value;
          this.OnPropertyChanged("Summary");
        }
      }
    }
    
    [Column(Storage="_Notes", DBType="VarChar(2000)")]
    public string Notes {
      get {
        return this._Notes;
      }
      set {
        if ((this._Notes != value)) {
          this.OnPropertyChanging("Notes");
          this._Notes = value;
          this.OnPropertyChanged("Notes");
        }
      }
    }
    
    [Association(Name="FK_Book_Publisher", Storage="_Publisher", ThisKey="PublisherId", IsParent=true)]
    public Publisher Publisher {
      get {
        return this._Publisher.Entity;
      }
      set {
        Publisher v = this._Publisher.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Publisher");
          if ((v != null)) {
            this._Publisher.Entity = null;
            v.Books.Remove(this);
          }
          this._Publisher.Entity = value;
          if ((value != null)) {
            value.Books.Add(this);
          }
          this.OnPropertyChanged("Publisher");
        }
      }
    }
    
    [Association(Name="FK_Book_Subject", Storage="_Subject", ThisKey="SubjectId", IsParent=true)]
    public Subject Subject {
      get {
        return this._Subject.Entity;
      }
      set {
        Subject v = this._Subject.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Subject");
          if ((v != null)) {
            this._Subject.Entity = null;
            v.Books.Remove(this);
          }
          this._Subject.Entity = value;
          if ((value != null)) {
            value.Books.Add(this);
          }
          this.OnPropertyChanged("Subject");
        }
      }
    }
    
    [Association(Name="FK_BookAuthor_Book", Storage="_BookAuthors", OtherKey="BookId")]
    public EntitySet<BookAuthor> BookAuthors {
      get {
        return this._BookAuthors;
      }
      set {
        this._BookAuthors.Assign(value);
      }
    }
    
    [Association(Name="FK_Review_Book", Storage="_Reviews", OtherKey="BookId")]
    public EntitySet<Review> Reviews {
      get {
        return this._Reviews;
      }
      set {
        this._Reviews.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_BookAuthors(BookAuthor entity) {
      this.OnPropertyChanging(null);
      entity.Book = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_BookAuthors(BookAuthor entity) {
      this.OnPropertyChanging(null);
      entity.Book = null;
      this.OnPropertyChanged(null);
    }
    
    private void attach_Reviews(Review entity) {
      this.OnPropertyChanging(null);
      entity.Book = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Reviews(Review entity) {
      this.OnPropertyChanging(null);
      entity.Book = null;
      this.OnPropertyChanged(null);
    }
  }
}
