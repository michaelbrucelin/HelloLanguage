// Go语言的代码通过包（package）组织，包类似于其它语言里的库（libraries）或者模块（modules）。
// 一个包由位于单个目录下的一个或多个.go源代码文件组成，目录名称定义了包的作用。
package main // 名为main的包比较特殊，它用来定义一个独立的可执行程序，而不是库。

// 必须恰当导入需要的包，缺少了必要的包或者导入了不需要的包，程序都无法编译通过。这项严格要求避免了程序开发过程中引入未使用的包。
import "fmt" // 导入其它的包

// 在package与import之后，就可以写程序声明了
func main() { // 在main里的main函数也很特殊，它是整个程序执行时的入口
	fmt.Println("Hello, 世界")
	// Go语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句。实际上，编译器会主动把特定符号后的换行符转换为分号，因此换行符添加的位置会影响Go代码的正确解析。
	// 举个例子，函数的左括号 { 必须和func函数声明在同一行上，且位于末尾，不能独占一行，而在表达式 x+y 中，可在 + 后换行，不能在 + 前换行，
	// 因为以 + 结尾的话不会被插入分号分隔符，但是以 x 结尾的话则会被分号分隔符，从而导致编译错误。
}

/*
Go语言在代码格式上采取了很强硬的态度。gofmt工具把代码格式化为标准格式（这个格式化工具没有任何可以调整代码格式的参数，Go语言就是这么任性），
并且go工具中的fmt子命令会对指定包，否则默认为当前目录中所有.go源文件应用gofmt命令。更重要的是，这样可以做多种自动源码转换，如果放任Go语言代码格式，这些转换就不大可能了。
很多文本编辑器都可以配置为保存文件时自动执行gofmt，这样你的源代码总会被恰当地格式化。
还有个相关的工具，goimports，可以根据代码需要，自动地添加或删除import声明。这个工具并没有包含在标准的分发包中，可以用下面的命令安装：
$ go get golang.org/x/tools/cmd/goimports

# 一次性测试代码
# go run helloworld.go
Hello, 世界

# 编译执行
# go build helloworld.go
# ll
total 1720
-rwxr-xr-x 1 root root 1754329 Apr 16 07:53 helloworld
-rw-r--r-- 1 root root     158 Apr 16 07:53 helloworld.go

# ./helloworld
Hello, 世界
*/
